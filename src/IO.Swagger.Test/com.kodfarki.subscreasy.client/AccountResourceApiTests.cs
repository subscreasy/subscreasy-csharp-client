/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountResourceApiTests
    {
        private AccountResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountResourceApi
            //Assert.IsInstanceOfType(typeof(AccountResourceApi), instance, "instance is a AccountResourceApi");
        }

        
        /// <summary>
        /// Test IsAuthenticatedUsingGET
        /// </summary>
        [Test]
        public void IsAuthenticatedUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.IsAuthenticatedUsingGET();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test RegisterAccountUsingPOST
        /// </summary>
        [Test]
        public void RegisterAccountUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserDTO managedUserVM = null;
            //var response = instance.RegisterAccountUsingPOST(managedUserVM);
            //Assert.IsInstanceOf<ResponseEntity> (response, "response is ResponseEntity");
        }
        
    }

}
