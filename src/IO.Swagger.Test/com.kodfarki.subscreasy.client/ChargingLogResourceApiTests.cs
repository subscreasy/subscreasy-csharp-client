/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ChargingLogResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ChargingLogResourceApiTests
    {
        private ChargingLogResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ChargingLogResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChargingLogResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ChargingLogResourceApi
            //Assert.IsInstanceOfType(typeof(ChargingLogResourceApi), instance, "instance is a ChargingLogResourceApi");
        }

        
        /// <summary>
        /// Test CreateChargingLogUsingPOST
        /// </summary>
        [Test]
        public void CreateChargingLogUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargingLog chargingLog = null;
            //var response = instance.CreateChargingLogUsingPOST(chargingLog);
            //Assert.IsInstanceOf<ChargingLog> (response, "response is ChargingLog");
        }
        
        /// <summary>
        /// Test DeleteChargingLogUsingDELETE
        /// </summary>
        [Test]
        public void DeleteChargingLogUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteChargingLogUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test GetAllChargingLogsUsingGET
        /// </summary>
        [Test]
        public void GetAllChargingLogsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //List<string> sort = null;
            //var response = instance.GetAllChargingLogsUsingGET(page, size, sort);
            //Assert.IsInstanceOf<List<ChargingLog>> (response, "response is List<ChargingLog>");
        }
        
        /// <summary>
        /// Test GetChargingLogUsingGET
        /// </summary>
        [Test]
        public void GetChargingLogUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetChargingLogUsingGET(id);
            //Assert.IsInstanceOf<ChargingLog> (response, "response is ChargingLog");
        }
        
        /// <summary>
        /// Test RefundUsingPOST
        /// </summary>
        [Test]
        public void RefundUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? chargingLogId = null;
            //var response = instance.RefundUsingPOST(chargingLogId);
            //Assert.IsInstanceOf<ChargingLog> (response, "response is ChargingLog");
        }
        
        /// <summary>
        /// Test UpdateChargingLogUsingPUT
        /// </summary>
        [Test]
        public void UpdateChargingLogUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargingLog chargingLog = null;
            //var response = instance.UpdateChargingLogUsingPUT(chargingLog);
            //Assert.IsInstanceOf<ChargingLog> (response, "response is ChargingLog");
        }
        
    }

}
