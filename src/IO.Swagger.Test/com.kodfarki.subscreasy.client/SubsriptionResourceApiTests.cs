/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SubsriptionResourceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SubsriptionResourceApiTests
    {
        private SubsriptionResourceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubsriptionResourceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubsriptionResourceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SubsriptionResourceApi
            //Assert.IsInstanceOfType(typeof(SubsriptionResourceApi), instance, "instance is a SubsriptionResourceApi");
        }

        
        /// <summary>
        /// Test CancelSubscriptionUsingPUT
        /// </summary>
        [Test]
        public void CancelSubscriptionUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Cancellation cancellation = null;
            //var response = instance.CancelSubscriptionUsingPUT(cancellation);
            //Assert.IsInstanceOf<Subsription> (response, "response is Subsription");
        }
        
        /// <summary>
        /// Test GetActiveSubscriptionsUsingGET
        /// </summary>
        [Test]
        public void GetActiveSubscriptionsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string secureId = null;
            //var response = instance.GetActiveSubscriptionsUsingGET(secureId);
            //Assert.IsInstanceOf<List<Subsription>> (response, "response is List<Subsription>");
        }
        
        /// <summary>
        /// Test GetAllCompanySubscriptionsUsingGET
        /// </summary>
        [Test]
        public void GetAllCompanySubscriptionsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAllCompanySubscriptionsUsingGET(id);
            //Assert.IsInstanceOf<List<Subsription>> (response, "response is List<Subsription>");
        }
        
        /// <summary>
        /// Test GetSubsriptionUsingGET
        /// </summary>
        [Test]
        public void GetSubsriptionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetSubsriptionUsingGET(id);
            //Assert.IsInstanceOf<Subsription> (response, "response is Subsription");
        }
        
        /// <summary>
        /// Test StartSubscriptionUsingPOST
        /// </summary>
        [Test]
        public void StartSubscriptionUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StartSubscriptionRequest request = null;
            //var response = instance.StartSubscriptionUsingPOST(request);
            //Assert.IsInstanceOf<SubscriptionCreateResult> (response, "response is SubscriptionCreateResult");
        }
        
    }

}
