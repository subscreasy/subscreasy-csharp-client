/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EndpointsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EndpointsApiTests
    {
        private EndpointsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EndpointsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EndpointsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EndpointsApi
            //Assert.IsInstanceOfType(typeof(EndpointsApi), instance, "instance is a EndpointsApi");
        }

        
        /// <summary>
        /// Test AuthorizeUsingPUT
        /// </summary>
        [Test]
        public void AuthorizeUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Authorization authorization = null;
            //var response = instance.AuthorizeUsingPUT(authorization);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test DeductUsingPUT
        /// </summary>
        [Test]
        public void DeductUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Deduction deduction = null;
            //var response = instance.DeductUsingPUT(deduction);
            //Assert.IsInstanceOf<DeductionResult> (response, "response is DeductionResult");
        }
        
        /// <summary>
        /// Test GetAuthorizedServicesUsingGET
        /// </summary>
        [Test]
        public void GetAuthorizedServicesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string secureId = null;
            //var response = instance.GetAuthorizedServicesUsingGET(secureId);
            //Assert.IsInstanceOf<AuthorizedServicesResponse> (response, "response is AuthorizedServicesResponse");
        }
        
        /// <summary>
        /// Test GetChargingLogBySubscriptionUsingGET
        /// </summary>
        [Test]
        public void GetChargingLogBySubscriptionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetChargingLogBySubscriptionUsingGET(id);
            //Assert.IsInstanceOf<List<ChargingLog>> (response, "response is List<ChargingLog>");
        }
        
        /// <summary>
        /// Test GetCustomerTotalAmountUsingGET
        /// </summary>
        [Test]
        public void GetCustomerTotalAmountUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCustomerTotalAmountUsingGET(id);
            //Assert.IsInstanceOf<long?> (response, "response is long?");
        }
        
        /// <summary>
        /// Test GetInvoiceDetailsUsingGET
        /// </summary>
        [Test]
        public void GetInvoiceDetailsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InvoiceRequest invoiceRequest = null;
            //var response = instance.GetInvoiceDetailsUsingGET(invoiceRequest);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetMessageTemplateUsingGET
        /// </summary>
        [Test]
        public void GetMessageTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lifecycleEventName = null;
            //var response = instance.GetMessageTemplateUsingGET(lifecycleEventName);
            //Assert.IsInstanceOf<MessageTemplate> (response, "response is MessageTemplate");
        }
        
        /// <summary>
        /// Test GetServiceInstancesBySubscriptionUsingGET
        /// </summary>
        [Test]
        public void GetServiceInstancesBySubscriptionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetServiceInstancesBySubscriptionUsingGET(id);
            //Assert.IsInstanceOf<List<ServiceInstanceResult>> (response, "response is List<ServiceInstanceResult>");
        }
        
        /// <summary>
        /// Test GetServiceOfferingsBySubscriptionPlanUsingGET
        /// </summary>
        [Test]
        public void GetServiceOfferingsBySubscriptionPlanUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetServiceOfferingsBySubscriptionPlanUsingGET(id);
            //Assert.IsInstanceOf<List<ServiceOfferingResult>> (response, "response is List<ServiceOfferingResult>");
        }
        
        /// <summary>
        /// Test GetTotalRevenuePerMonthUsingGET
        /// </summary>
        [Test]
        public void GetTotalRevenuePerMonthUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetTotalRevenuePerMonthUsingGET(id);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
    }

}
