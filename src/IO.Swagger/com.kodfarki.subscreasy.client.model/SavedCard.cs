/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// SavedCard
    /// </summary>
    [DataContract]
    public partial class SavedCard :  IEquatable<SavedCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SavedCard" /> class.
        /// </summary>
        /// <param name="BinNumber">BinNumber.</param>
        /// <param name="CardAlias">CardAlias.</param>
        /// <param name="CardAssociation">CardAssociation.</param>
        /// <param name="CardBankCode">CardBankCode.</param>
        /// <param name="CardBankName">CardBankName.</param>
        /// <param name="CardFamily">CardFamily.</param>
        /// <param name="CardToken">CardToken.</param>
        /// <param name="CardUserKey">CardUserKey.</param>
        /// <param name="CartType">CartType.</param>
        /// <param name="Id">Id.</param>
        public SavedCard(string BinNumber = default(string), string CardAlias = default(string), string CardAssociation = default(string), long? CardBankCode = default(long?), string CardBankName = default(string), string CardFamily = default(string), string CardToken = default(string), string CardUserKey = default(string), string CartType = default(string), long? Id = default(long?))
        {
            this.BinNumber = BinNumber;
            this.CardAlias = CardAlias;
            this.CardAssociation = CardAssociation;
            this.CardBankCode = CardBankCode;
            this.CardBankName = CardBankName;
            this.CardFamily = CardFamily;
            this.CardToken = CardToken;
            this.CardUserKey = CardUserKey;
            this.CartType = CartType;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets BinNumber
        /// </summary>
        [DataMember(Name="binNumber", EmitDefaultValue=false)]
        public string BinNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardAlias
        /// </summary>
        [DataMember(Name="cardAlias", EmitDefaultValue=false)]
        public string CardAlias { get; set; }

        /// <summary>
        /// Gets or Sets CardAssociation
        /// </summary>
        [DataMember(Name="cardAssociation", EmitDefaultValue=false)]
        public string CardAssociation { get; set; }

        /// <summary>
        /// Gets or Sets CardBankCode
        /// </summary>
        [DataMember(Name="cardBankCode", EmitDefaultValue=false)]
        public long? CardBankCode { get; set; }

        /// <summary>
        /// Gets or Sets CardBankName
        /// </summary>
        [DataMember(Name="cardBankName", EmitDefaultValue=false)]
        public string CardBankName { get; set; }

        /// <summary>
        /// Gets or Sets CardFamily
        /// </summary>
        [DataMember(Name="cardFamily", EmitDefaultValue=false)]
        public string CardFamily { get; set; }

        /// <summary>
        /// Gets or Sets CardToken
        /// </summary>
        [DataMember(Name="cardToken", EmitDefaultValue=false)]
        public string CardToken { get; set; }

        /// <summary>
        /// Gets or Sets CardUserKey
        /// </summary>
        [DataMember(Name="cardUserKey", EmitDefaultValue=false)]
        public string CardUserKey { get; set; }

        /// <summary>
        /// Gets or Sets CartType
        /// </summary>
        [DataMember(Name="cartType", EmitDefaultValue=false)]
        public string CartType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedCard {\n");
            sb.Append("  BinNumber: ").Append(BinNumber).Append("\n");
            sb.Append("  CardAlias: ").Append(CardAlias).Append("\n");
            sb.Append("  CardAssociation: ").Append(CardAssociation).Append("\n");
            sb.Append("  CardBankCode: ").Append(CardBankCode).Append("\n");
            sb.Append("  CardBankName: ").Append(CardBankName).Append("\n");
            sb.Append("  CardFamily: ").Append(CardFamily).Append("\n");
            sb.Append("  CardToken: ").Append(CardToken).Append("\n");
            sb.Append("  CardUserKey: ").Append(CardUserKey).Append("\n");
            sb.Append("  CartType: ").Append(CartType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavedCard);
        }

        /// <summary>
        /// Returns true if SavedCard instances are equal
        /// </summary>
        /// <param name="input">Instance of SavedCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinNumber == input.BinNumber ||
                    (this.BinNumber != null &&
                    this.BinNumber.Equals(input.BinNumber))
                ) && 
                (
                    this.CardAlias == input.CardAlias ||
                    (this.CardAlias != null &&
                    this.CardAlias.Equals(input.CardAlias))
                ) && 
                (
                    this.CardAssociation == input.CardAssociation ||
                    (this.CardAssociation != null &&
                    this.CardAssociation.Equals(input.CardAssociation))
                ) && 
                (
                    this.CardBankCode == input.CardBankCode ||
                    (this.CardBankCode != null &&
                    this.CardBankCode.Equals(input.CardBankCode))
                ) && 
                (
                    this.CardBankName == input.CardBankName ||
                    (this.CardBankName != null &&
                    this.CardBankName.Equals(input.CardBankName))
                ) && 
                (
                    this.CardFamily == input.CardFamily ||
                    (this.CardFamily != null &&
                    this.CardFamily.Equals(input.CardFamily))
                ) && 
                (
                    this.CardToken == input.CardToken ||
                    (this.CardToken != null &&
                    this.CardToken.Equals(input.CardToken))
                ) && 
                (
                    this.CardUserKey == input.CardUserKey ||
                    (this.CardUserKey != null &&
                    this.CardUserKey.Equals(input.CardUserKey))
                ) && 
                (
                    this.CartType == input.CartType ||
                    (this.CartType != null &&
                    this.CartType.Equals(input.CartType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinNumber != null)
                    hashCode = hashCode * 59 + this.BinNumber.GetHashCode();
                if (this.CardAlias != null)
                    hashCode = hashCode * 59 + this.CardAlias.GetHashCode();
                if (this.CardAssociation != null)
                    hashCode = hashCode * 59 + this.CardAssociation.GetHashCode();
                if (this.CardBankCode != null)
                    hashCode = hashCode * 59 + this.CardBankCode.GetHashCode();
                if (this.CardBankName != null)
                    hashCode = hashCode * 59 + this.CardBankName.GetHashCode();
                if (this.CardFamily != null)
                    hashCode = hashCode * 59 + this.CardFamily.GetHashCode();
                if (this.CardToken != null)
                    hashCode = hashCode * 59 + this.CardToken.GetHashCode();
                if (this.CardUserKey != null)
                    hashCode = hashCode * 59 + this.CardUserKey.GetHashCode();
                if (this.CartType != null)
                    hashCode = hashCode * 59 + this.CartType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
