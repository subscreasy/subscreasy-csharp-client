/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// PaymentCard
    /// </summary>
    [DataContract]
    public partial class PaymentCard :  IEquatable<PaymentCard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCard" /> class.
        /// </summary>
        /// <param name="CardAlias">CardAlias.</param>
        /// <param name="CardExpiry">CardExpiry.</param>
        /// <param name="CardHolderName">CardHolderName.</param>
        /// <param name="CardNumber">CardNumber.</param>
        /// <param name="CardToken">CardToken.</param>
        /// <param name="CardUserKey">CardUserKey.</param>
        /// <param name="Cvc">Cvc.</param>
        /// <param name="ExpireMonth">ExpireMonth.</param>
        /// <param name="ExpireYear">ExpireYear.</param>
        /// <param name="RegisterCard">RegisterCard.</param>
        public PaymentCard(string CardAlias = default(string), string CardExpiry = default(string), string CardHolderName = default(string), string CardNumber = default(string), string CardToken = default(string), string CardUserKey = default(string), string Cvc = default(string), string ExpireMonth = default(string), string ExpireYear = default(string), int? RegisterCard = default(int?))
        {
            this.CardAlias = CardAlias;
            this.CardExpiry = CardExpiry;
            this.CardHolderName = CardHolderName;
            this.CardNumber = CardNumber;
            this.CardToken = CardToken;
            this.CardUserKey = CardUserKey;
            this.Cvc = Cvc;
            this.ExpireMonth = ExpireMonth;
            this.ExpireYear = ExpireYear;
            this.RegisterCard = RegisterCard;
        }
        
        /// <summary>
        /// Gets or Sets CardAlias
        /// </summary>
        [DataMember(Name="cardAlias", EmitDefaultValue=false)]
        public string CardAlias { get; set; }

        /// <summary>
        /// Gets or Sets CardExpiry
        /// </summary>
        [DataMember(Name="cardExpiry", EmitDefaultValue=false)]
        public string CardExpiry { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardToken
        /// </summary>
        [DataMember(Name="cardToken", EmitDefaultValue=false)]
        public string CardToken { get; set; }

        /// <summary>
        /// Gets or Sets CardUserKey
        /// </summary>
        [DataMember(Name="cardUserKey", EmitDefaultValue=false)]
        public string CardUserKey { get; set; }

        /// <summary>
        /// Gets or Sets Cvc
        /// </summary>
        [DataMember(Name="cvc", EmitDefaultValue=false)]
        public string Cvc { get; set; }

        /// <summary>
        /// Gets or Sets ExpireMonth
        /// </summary>
        [DataMember(Name="expireMonth", EmitDefaultValue=false)]
        public string ExpireMonth { get; set; }

        /// <summary>
        /// Gets or Sets ExpireYear
        /// </summary>
        [DataMember(Name="expireYear", EmitDefaultValue=false)]
        public string ExpireYear { get; set; }

        /// <summary>
        /// Gets or Sets RegisterCard
        /// </summary>
        [DataMember(Name="registerCard", EmitDefaultValue=false)]
        public int? RegisterCard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCard {\n");
            sb.Append("  CardAlias: ").Append(CardAlias).Append("\n");
            sb.Append("  CardExpiry: ").Append(CardExpiry).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardToken: ").Append(CardToken).Append("\n");
            sb.Append("  CardUserKey: ").Append(CardUserKey).Append("\n");
            sb.Append("  Cvc: ").Append(Cvc).Append("\n");
            sb.Append("  ExpireMonth: ").Append(ExpireMonth).Append("\n");
            sb.Append("  ExpireYear: ").Append(ExpireYear).Append("\n");
            sb.Append("  RegisterCard: ").Append(RegisterCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCard);
        }

        /// <summary>
        /// Returns true if PaymentCard instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardAlias == input.CardAlias ||
                    (this.CardAlias != null &&
                    this.CardAlias.Equals(input.CardAlias))
                ) && 
                (
                    this.CardExpiry == input.CardExpiry ||
                    (this.CardExpiry != null &&
                    this.CardExpiry.Equals(input.CardExpiry))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardToken == input.CardToken ||
                    (this.CardToken != null &&
                    this.CardToken.Equals(input.CardToken))
                ) && 
                (
                    this.CardUserKey == input.CardUserKey ||
                    (this.CardUserKey != null &&
                    this.CardUserKey.Equals(input.CardUserKey))
                ) && 
                (
                    this.Cvc == input.Cvc ||
                    (this.Cvc != null &&
                    this.Cvc.Equals(input.Cvc))
                ) && 
                (
                    this.ExpireMonth == input.ExpireMonth ||
                    (this.ExpireMonth != null &&
                    this.ExpireMonth.Equals(input.ExpireMonth))
                ) && 
                (
                    this.ExpireYear == input.ExpireYear ||
                    (this.ExpireYear != null &&
                    this.ExpireYear.Equals(input.ExpireYear))
                ) && 
                (
                    this.RegisterCard == input.RegisterCard ||
                    (this.RegisterCard != null &&
                    this.RegisterCard.Equals(input.RegisterCard))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardAlias != null)
                    hashCode = hashCode * 59 + this.CardAlias.GetHashCode();
                if (this.CardExpiry != null)
                    hashCode = hashCode * 59 + this.CardExpiry.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CardToken != null)
                    hashCode = hashCode * 59 + this.CardToken.GetHashCode();
                if (this.CardUserKey != null)
                    hashCode = hashCode * 59 + this.CardUserKey.GetHashCode();
                if (this.Cvc != null)
                    hashCode = hashCode * 59 + this.Cvc.GetHashCode();
                if (this.ExpireMonth != null)
                    hashCode = hashCode * 59 + this.ExpireMonth.GetHashCode();
                if (this.ExpireYear != null)
                    hashCode = hashCode * 59 + this.ExpireYear.GetHashCode();
                if (this.RegisterCard != null)
                    hashCode = hashCode * 59 + this.RegisterCard.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
