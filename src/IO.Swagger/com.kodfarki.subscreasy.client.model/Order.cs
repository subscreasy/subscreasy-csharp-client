/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Defines ShippingCompany
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingCompanyEnum
        {
            
            /// <summary>
            /// Enum MNG for value: MNG
            /// </summary>
            [EnumMember(Value = "MNG")]
            MNG = 1,
            
            /// <summary>
            /// Enum SURAT for value: SURAT
            /// </summary>
            [EnumMember(Value = "SURAT")]
            SURAT = 2,
            
            /// <summary>
            /// Enum YURTICI for value: YURTICI
            /// </summary>
            [EnumMember(Value = "YURTICI")]
            YURTICI = 3
        }

        /// <summary>
        /// Gets or Sets ShippingCompany
        /// </summary>
        [DataMember(Name="shippingCompany", EmitDefaultValue=false)]
        public ShippingCompanyEnum? ShippingCompany { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PREPARING for value: PREPARING
            /// </summary>
            [EnumMember(Value = "PREPARING")]
            PREPARING = 1,
            
            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,
            
            /// <summary>
            /// Enum DELIVERED for value: DELIVERED
            /// </summary>
            [EnumMember(Value = "DELIVERED")]
            DELIVERED = 3,
            
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="Buyer">Buyer (required).</param>
        /// <param name="Company">Company (required).</param>
        /// <param name="CreateDate">CreateDate.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Offer">Offer (required).</param>
        /// <param name="Payment">Payment.</param>
        /// <param name="ShippingAddress">ShippingAddress.</param>
        /// <param name="ShippingCode">ShippingCode.</param>
        /// <param name="ShippingCompany">ShippingCompany.</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="Subscription">Subscription (required).</param>
        public Order(Subscriber Buyer = default(Subscriber), Company Company = default(Company), DateTime? CreateDate = default(DateTime?), long? Id = default(long?), Offer Offer = default(Offer), ChargingLog Payment = default(ChargingLog), long? ShippingAddress = default(long?), string ShippingCode = default(string), ShippingCompanyEnum? ShippingCompany = default(ShippingCompanyEnum?), StatusEnum Status = default(StatusEnum), long? Subscription = default(long?))
        {
            // to ensure "Buyer" is required (not null)
            if (Buyer == null)
            {
                throw new InvalidDataException("Buyer is a required property for Order and cannot be null");
            }
            else
            {
                this.Buyer = Buyer;
            }
            // to ensure "Company" is required (not null)
            if (Company == null)
            {
                throw new InvalidDataException("Company is a required property for Order and cannot be null");
            }
            else
            {
                this.Company = Company;
            }
            // to ensure "Offer" is required (not null)
            if (Offer == null)
            {
                throw new InvalidDataException("Offer is a required property for Order and cannot be null");
            }
            else
            {
                this.Offer = Offer;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for Order and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Subscription" is required (not null)
            if (Subscription == null)
            {
                throw new InvalidDataException("Subscription is a required property for Order and cannot be null");
            }
            else
            {
                this.Subscription = Subscription;
            }
            this.CreateDate = CreateDate;
            this.Id = Id;
            this.Payment = Payment;
            this.ShippingAddress = ShippingAddress;
            this.ShippingCode = ShippingCode;
            this.ShippingCompany = ShippingCompany;
        }
        
        /// <summary>
        /// Gets or Sets Buyer
        /// </summary>
        [DataMember(Name="buyer", EmitDefaultValue=false)]
        public Subscriber Buyer { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Offer
        /// </summary>
        [DataMember(Name="offer", EmitDefaultValue=false)]
        public Offer Offer { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name="payment", EmitDefaultValue=false)]
        public ChargingLog Payment { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public long? ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingCode
        /// </summary>
        [DataMember(Name="shippingCode", EmitDefaultValue=false)]
        public string ShippingCode { get; set; }



        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name="subscription", EmitDefaultValue=false)]
        public long? Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Buyer: ").Append(Buyer).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ShippingCode: ").Append(ShippingCode).Append("\n");
            sb.Append("  ShippingCompany: ").Append(ShippingCompany).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Buyer == input.Buyer ||
                    (this.Buyer != null &&
                    this.Buyer.Equals(input.Buyer))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Offer == input.Offer ||
                    (this.Offer != null &&
                    this.Offer.Equals(input.Offer))
                ) && 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ShippingCode == input.ShippingCode ||
                    (this.ShippingCode != null &&
                    this.ShippingCode.Equals(input.ShippingCode))
                ) && 
                (
                    this.ShippingCompany == input.ShippingCompany ||
                    (this.ShippingCompany != null &&
                    this.ShippingCompany.Equals(input.ShippingCompany))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Buyer != null)
                    hashCode = hashCode * 59 + this.Buyer.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Offer != null)
                    hashCode = hashCode * 59 + this.Offer.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ShippingCode != null)
                    hashCode = hashCode * 59 + this.ShippingCode.GetHashCode();
                if (this.ShippingCompany != null)
                    hashCode = hashCode * 59 + this.ShippingCompany.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subscription != null)
                    hashCode = hashCode * 59 + this.Subscription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
