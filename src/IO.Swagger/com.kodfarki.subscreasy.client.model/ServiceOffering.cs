/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// ServiceOffering
    /// </summary>
    [DataContract]
    public partial class ServiceOffering :  IEquatable<ServiceOffering>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceOffering" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceOffering() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceOffering" /> class.
        /// </summary>
        /// <param name="Company">Company.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Offer">Offer (required).</param>
        /// <param name="OverUsagePrice">OverUsagePrice.</param>
        /// <param name="OverUsageQuota">OverUsageQuota.</param>
        /// <param name="Price">Price.</param>
        /// <param name="QuotaAmount">QuotaAmount (required).</param>
        /// <param name="Service">Service.</param>
        /// <param name="UnitName">UnitName.</param>
        public ServiceOffering(Company Company = default(Company), string Description = default(string), long? Id = default(long?), Offer Offer = default(Offer), decimal? OverUsagePrice = default(decimal?), decimal? OverUsageQuota = default(decimal?), decimal? Price = default(decimal?), decimal? QuotaAmount = default(decimal?), Service Service = default(Service), string UnitName = default(string))
        {
            // to ensure "Offer" is required (not null)
            if (Offer == null)
            {
                throw new InvalidDataException("Offer is a required property for ServiceOffering and cannot be null");
            }
            else
            {
                this.Offer = Offer;
            }
            // to ensure "QuotaAmount" is required (not null)
            if (QuotaAmount == null)
            {
                throw new InvalidDataException("QuotaAmount is a required property for ServiceOffering and cannot be null");
            }
            else
            {
                this.QuotaAmount = QuotaAmount;
            }
            this.Company = Company;
            this.Description = Description;
            this.Id = Id;
            this.OverUsagePrice = OverUsagePrice;
            this.OverUsageQuota = OverUsageQuota;
            this.Price = Price;
            this.Service = Service;
            this.UnitName = UnitName;
        }
        
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Offer
        /// </summary>
        [DataMember(Name="offer", EmitDefaultValue=false)]
        public Offer Offer { get; set; }

        /// <summary>
        /// Gets or Sets OverUsagePrice
        /// </summary>
        [DataMember(Name="overUsagePrice", EmitDefaultValue=false)]
        public decimal? OverUsagePrice { get; set; }

        /// <summary>
        /// Gets or Sets OverUsageQuota
        /// </summary>
        [DataMember(Name="overUsageQuota", EmitDefaultValue=false)]
        public decimal? OverUsageQuota { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets QuotaAmount
        /// </summary>
        [DataMember(Name="quotaAmount", EmitDefaultValue=false)]
        public decimal? QuotaAmount { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public Service Service { get; set; }

        /// <summary>
        /// Gets or Sets UnitName
        /// </summary>
        [DataMember(Name="unitName", EmitDefaultValue=false)]
        public string UnitName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceOffering {\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Offer: ").Append(Offer).Append("\n");
            sb.Append("  OverUsagePrice: ").Append(OverUsagePrice).Append("\n");
            sb.Append("  OverUsageQuota: ").Append(OverUsageQuota).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  QuotaAmount: ").Append(QuotaAmount).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceOffering);
        }

        /// <summary>
        /// Returns true if ServiceOffering instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceOffering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceOffering input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Offer == input.Offer ||
                    (this.Offer != null &&
                    this.Offer.Equals(input.Offer))
                ) && 
                (
                    this.OverUsagePrice == input.OverUsagePrice ||
                    (this.OverUsagePrice != null &&
                    this.OverUsagePrice.Equals(input.OverUsagePrice))
                ) && 
                (
                    this.OverUsageQuota == input.OverUsageQuota ||
                    (this.OverUsageQuota != null &&
                    this.OverUsageQuota.Equals(input.OverUsageQuota))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.QuotaAmount == input.QuotaAmount ||
                    (this.QuotaAmount != null &&
                    this.QuotaAmount.Equals(input.QuotaAmount))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.UnitName == input.UnitName ||
                    (this.UnitName != null &&
                    this.UnitName.Equals(input.UnitName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Offer != null)
                    hashCode = hashCode * 59 + this.Offer.GetHashCode();
                if (this.OverUsagePrice != null)
                    hashCode = hashCode * 59 + this.OverUsagePrice.GetHashCode();
                if (this.OverUsageQuota != null)
                    hashCode = hashCode * 59 + this.OverUsageQuota.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.QuotaAmount != null)
                    hashCode = hashCode * 59 + this.QuotaAmount.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.UnitName != null)
                    hashCode = hashCode * 59 + this.UnitName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
