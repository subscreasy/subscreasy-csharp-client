/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// Deduction
    /// </summary>
    [DataContract]
    public partial class Deduction :  IEquatable<Deduction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Deduction" /> class.
        /// </summary>
        /// <param name="Amount">Amount.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ServiceId">ServiceId.</param>
        /// <param name="UsageEndTime">UsageEndTime.</param>
        /// <param name="UsageStartTime">UsageStartTime.</param>
        /// <param name="UserId">UserId.</param>
        public Deduction(long? Amount = default(long?), long? Id = default(long?), long? ServiceId = default(long?), DateTime? UsageEndTime = default(DateTime?), DateTime? UsageStartTime = default(DateTime?), string UserId = default(string))
        {
            this.Amount = Amount;
            this.Id = Id;
            this.ServiceId = ServiceId;
            this.UsageEndTime = UsageEndTime;
            this.UsageStartTime = UsageStartTime;
            this.UserId = UserId;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public long? ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets UsageEndTime
        /// </summary>
        [DataMember(Name="usageEndTime", EmitDefaultValue=false)]
        public DateTime? UsageEndTime { get; set; }

        /// <summary>
        /// Gets or Sets UsageStartTime
        /// </summary>
        [DataMember(Name="usageStartTime", EmitDefaultValue=false)]
        public DateTime? UsageStartTime { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Deduction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  UsageEndTime: ").Append(UsageEndTime).Append("\n");
            sb.Append("  UsageStartTime: ").Append(UsageStartTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deduction);
        }

        /// <summary>
        /// Returns true if Deduction instances are equal
        /// </summary>
        /// <param name="input">Instance of Deduction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deduction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.UsageEndTime == input.UsageEndTime ||
                    (this.UsageEndTime != null &&
                    this.UsageEndTime.Equals(input.UsageEndTime))
                ) && 
                (
                    this.UsageStartTime == input.UsageStartTime ||
                    (this.UsageStartTime != null &&
                    this.UsageStartTime.Equals(input.UsageStartTime))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.UsageEndTime != null)
                    hashCode = hashCode * 59 + this.UsageEndTime.GetHashCode();
                if (this.UsageStartTime != null)
                    hashCode = hashCode * 59 + this.UsageStartTime.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
