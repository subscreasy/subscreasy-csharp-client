/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// Subscriber
    /// </summary>
    [DataContract]
    public partial class Subscriber :  IEquatable<Subscriber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscriber" /> class.
        /// </summary>
        /// <param name="BillingAddress">BillingAddress.</param>
        /// <param name="Company">Company.</param>
        /// <param name="CreateDate">CreateDate.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IdentificationNo">IdentificationNo.</param>
        /// <param name="MerchantSubscriberId">MerchantSubscriberId.</param>
        /// <param name="Name">Name.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="SecureId">SecureId.</param>
        /// <param name="ShippingAddress">ShippingAddress.</param>
        /// <param name="Surname">Surname.</param>
        /// <param name="TaxAdministration">TaxAdministration.</param>
        /// <param name="TaxNumber">TaxNumber.</param>
        /// <param name="WorksFor">WorksFor.</param>
        public Subscriber(Address BillingAddress = default(Address), Company Company = default(Company), DateTime? CreateDate = default(DateTime?), string Email = default(string), long? Id = default(long?), string IdentificationNo = default(string), string MerchantSubscriberId = default(string), string Name = default(string), string PhoneNumber = default(string), string SecureId = default(string), Address ShippingAddress = default(Address), string Surname = default(string), string TaxAdministration = default(string), string TaxNumber = default(string), string WorksFor = default(string))
        {
            this.BillingAddress = BillingAddress;
            this.Company = Company;
            this.CreateDate = CreateDate;
            this.Email = Email;
            this.Id = Id;
            this.IdentificationNo = IdentificationNo;
            this.MerchantSubscriberId = MerchantSubscriberId;
            this.Name = Name;
            this.PhoneNumber = PhoneNumber;
            this.SecureId = SecureId;
            this.ShippingAddress = ShippingAddress;
            this.Surname = Surname;
            this.TaxAdministration = TaxAdministration;
            this.TaxNumber = TaxNumber;
            this.WorksFor = WorksFor;
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationNo
        /// </summary>
        [DataMember(Name="identificationNo", EmitDefaultValue=false)]
        public string IdentificationNo { get; set; }

        /// <summary>
        /// Gets or Sets MerchantSubscriberId
        /// </summary>
        [DataMember(Name="merchantSubscriberId", EmitDefaultValue=false)]
        public string MerchantSubscriberId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets SecureId
        /// </summary>
        [DataMember(Name="secureId", EmitDefaultValue=false)]
        public string SecureId { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets TaxAdministration
        /// </summary>
        [DataMember(Name="taxAdministration", EmitDefaultValue=false)]
        public string TaxAdministration { get; set; }

        /// <summary>
        /// Gets or Sets TaxNumber
        /// </summary>
        [DataMember(Name="taxNumber", EmitDefaultValue=false)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// Gets or Sets WorksFor
        /// </summary>
        [DataMember(Name="worksFor", EmitDefaultValue=false)]
        public string WorksFor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscriber {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentificationNo: ").Append(IdentificationNo).Append("\n");
            sb.Append("  MerchantSubscriberId: ").Append(MerchantSubscriberId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  SecureId: ").Append(SecureId).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  TaxAdministration: ").Append(TaxAdministration).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  WorksFor: ").Append(WorksFor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Subscriber);
        }

        /// <summary>
        /// Returns true if Subscriber instances are equal
        /// </summary>
        /// <param name="input">Instance of Subscriber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscriber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdentificationNo == input.IdentificationNo ||
                    (this.IdentificationNo != null &&
                    this.IdentificationNo.Equals(input.IdentificationNo))
                ) && 
                (
                    this.MerchantSubscriberId == input.MerchantSubscriberId ||
                    (this.MerchantSubscriberId != null &&
                    this.MerchantSubscriberId.Equals(input.MerchantSubscriberId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.SecureId == input.SecureId ||
                    (this.SecureId != null &&
                    this.SecureId.Equals(input.SecureId))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.TaxAdministration == input.TaxAdministration ||
                    (this.TaxAdministration != null &&
                    this.TaxAdministration.Equals(input.TaxAdministration))
                ) && 
                (
                    this.TaxNumber == input.TaxNumber ||
                    (this.TaxNumber != null &&
                    this.TaxNumber.Equals(input.TaxNumber))
                ) && 
                (
                    this.WorksFor == input.WorksFor ||
                    (this.WorksFor != null &&
                    this.WorksFor.Equals(input.WorksFor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdentificationNo != null)
                    hashCode = hashCode * 59 + this.IdentificationNo.GetHashCode();
                if (this.MerchantSubscriberId != null)
                    hashCode = hashCode * 59 + this.MerchantSubscriberId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.SecureId != null)
                    hashCode = hashCode * 59 + this.SecureId.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.TaxAdministration != null)
                    hashCode = hashCode * 59 + this.TaxAdministration.GetHashCode();
                if (this.TaxNumber != null)
                    hashCode = hashCode * 59 + this.TaxNumber.GetHashCode();
                if (this.WorksFor != null)
                    hashCode = hashCode * 59 + this.WorksFor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
