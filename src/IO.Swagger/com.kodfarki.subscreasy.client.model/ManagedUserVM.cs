/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// ManagedUserVM
    /// </summary>
    [DataContract]
    public partial class ManagedUserVM :  IEquatable<ManagedUserVM>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedUserVM" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManagedUserVM() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedUserVM" /> class.
        /// </summary>
        /// <param name="Activated">Activated.</param>
        /// <param name="Authorities">Authorities.</param>
        /// <param name="Company">Company.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="CreatedDate">CreatedDate.</param>
        /// <param name="Email">Email.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ImageUrl">ImageUrl.</param>
        /// <param name="LangKey">LangKey.</param>
        /// <param name="LastModifiedBy">LastModifiedBy.</param>
        /// <param name="LastModifiedDate">LastModifiedDate.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="Login">Login (required).</param>
        /// <param name="Password">Password.</param>
        /// <param name="ResetDate">ResetDate.</param>
        /// <param name="SiteName">SiteName.</param>
        public ManagedUserVM(bool? Activated = default(bool?), List<string> Authorities = default(List<string>), Company Company = default(Company), string CreatedBy = default(string), DateTime? CreatedDate = default(DateTime?), string Email = default(string), string FirstName = default(string), long? Id = default(long?), string ImageUrl = default(string), string LangKey = default(string), string LastModifiedBy = default(string), DateTime? LastModifiedDate = default(DateTime?), string LastName = default(string), string Login = default(string), string Password = default(string), string ResetDate = default(string), string SiteName = default(string))
        {
            // to ensure "Login" is required (not null)
            if (Login == null)
            {
                throw new InvalidDataException("Login is a required property for ManagedUserVM and cannot be null");
            }
            else
            {
                this.Login = Login;
            }
            this.Activated = Activated;
            this.Authorities = Authorities;
            this.Company = Company;
            this.CreatedBy = CreatedBy;
            this.CreatedDate = CreatedDate;
            this.Email = Email;
            this.FirstName = FirstName;
            this.Id = Id;
            this.ImageUrl = ImageUrl;
            this.LangKey = LangKey;
            this.LastModifiedBy = LastModifiedBy;
            this.LastModifiedDate = LastModifiedDate;
            this.LastName = LastName;
            this.Password = Password;
            this.ResetDate = ResetDate;
            this.SiteName = SiteName;
        }
        
        /// <summary>
        /// Gets or Sets Activated
        /// </summary>
        [DataMember(Name="activated", EmitDefaultValue=false)]
        public bool? Activated { get; set; }

        /// <summary>
        /// Gets or Sets Authorities
        /// </summary>
        [DataMember(Name="authorities", EmitDefaultValue=false)]
        public List<string> Authorities { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="imageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets LangKey
        /// </summary>
        [DataMember(Name="langKey", EmitDefaultValue=false)]
        public string LangKey { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name="lastModifiedBy", EmitDefaultValue=false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name="lastModifiedDate", EmitDefaultValue=false)]
        public DateTime? LastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public string Login { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets ResetDate
        /// </summary>
        [DataMember(Name="resetDate", EmitDefaultValue=false)]
        public string ResetDate { get; set; }

        /// <summary>
        /// Gets or Sets SiteName
        /// </summary>
        [DataMember(Name="siteName", EmitDefaultValue=false)]
        public string SiteName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagedUserVM {\n");
            sb.Append("  Activated: ").Append(Activated).Append("\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  LangKey: ").Append(LangKey).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ResetDate: ").Append(ResetDate).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManagedUserVM);
        }

        /// <summary>
        /// Returns true if ManagedUserVM instances are equal
        /// </summary>
        /// <param name="input">Instance of ManagedUserVM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagedUserVM input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activated == input.Activated ||
                    (this.Activated != null &&
                    this.Activated.Equals(input.Activated))
                ) && 
                (
                    this.Authorities == input.Authorities ||
                    this.Authorities != null &&
                    this.Authorities.SequenceEqual(input.Authorities)
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.LangKey == input.LangKey ||
                    (this.LangKey != null &&
                    this.LangKey.Equals(input.LangKey))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedDate == input.LastModifiedDate ||
                    (this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(input.LastModifiedDate))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ResetDate == input.ResetDate ||
                    (this.ResetDate != null &&
                    this.ResetDate.Equals(input.ResetDate))
                ) && 
                (
                    this.SiteName == input.SiteName ||
                    (this.SiteName != null &&
                    this.SiteName.Equals(input.SiteName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activated != null)
                    hashCode = hashCode * 59 + this.Activated.GetHashCode();
                if (this.Authorities != null)
                    hashCode = hashCode * 59 + this.Authorities.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.LangKey != null)
                    hashCode = hashCode * 59 + this.LangKey.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LastModifiedDate != null)
                    hashCode = hashCode * 59 + this.LastModifiedDate.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Login != null)
                    hashCode = hashCode * 59 + this.Login.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.ResetDate != null)
                    hashCode = hashCode * 59 + this.ResetDate.GetHashCode();
                if (this.SiteName != null)
                    hashCode = hashCode * 59 + this.SiteName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 5.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 50.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if(this.FirstName != null && this.FirstName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 0.", new [] { "FirstName" });
            }

            // ImageUrl (string) maxLength
            if(this.ImageUrl != null && this.ImageUrl.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageUrl, length must be less than 256.", new [] { "ImageUrl" });
            }

            // ImageUrl (string) minLength
            if(this.ImageUrl != null && this.ImageUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageUrl, length must be greater than 0.", new [] { "ImageUrl" });
            }

            // LangKey (string) maxLength
            if(this.LangKey != null && this.LangKey.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LangKey, length must be less than 5.", new [] { "LangKey" });
            }

            // LangKey (string) minLength
            if(this.LangKey != null && this.LangKey.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LangKey, length must be greater than 2.", new [] { "LangKey" });
            }

            // LastName (string) maxLength
            if(this.LastName != null && this.LastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 50.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if(this.LastName != null && this.LastName.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 0.", new [] { "LastName" });
            }

            // Login (string) maxLength
            if(this.Login != null && this.Login.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Login, length must be less than 50.", new [] { "Login" });
            }

            // Login (string) minLength
            if(this.Login != null && this.Login.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Login, length must be greater than 1.", new [] { "Login" });
            }

            // Login (string) pattern
            Regex regexLogin = new Regex(@"^[_'.@A-Za-z0-9-]*$", RegexOptions.CultureInvariant);
            if (false == regexLogin.Match(this.Login).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Login, must match a pattern of " + regexLogin, new [] { "Login" });
            }

            // Password (string) maxLength
            if(this.Password != null && this.Password.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 100.", new [] { "Password" });
            }

            // Password (string) minLength
            if(this.Password != null && this.Password.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 4.", new [] { "Password" });
            }

            // SiteName (string) maxLength
            if(this.SiteName != null && this.SiteName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiteName, length must be less than 50.", new [] { "SiteName" });
            }

            // SiteName (string) minLength
            if(this.SiteName != null && this.SiteName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiteName, length must be greater than 1.", new [] { "SiteName" });
            }

            yield break;
        }
    }

}
