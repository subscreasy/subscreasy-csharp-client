/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// Invoice
    /// </summary>
    [DataContract]
    public partial class Invoice :  IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="Amount">Amount.</param>
        /// <param name="BillingMonth">BillingMonth.</param>
        /// <param name="BillingYear">BillingYear.</param>
        /// <param name="Id">Id.</param>
        /// <param name="PeriodEnd">PeriodEnd.</param>
        /// <param name="PeriodStart">PeriodStart.</param>
        /// <param name="Status">Status.</param>
        /// <param name="SubscriberSecureId">SubscriberSecureId.</param>
        public Invoice(decimal? Amount = default(decimal?), int? BillingMonth = default(int?), int? BillingYear = default(int?), long? Id = default(long?), DateTime? PeriodEnd = default(DateTime?), DateTime? PeriodStart = default(DateTime?), string Status = default(string), string SubscriberSecureId = default(string))
        {
            this.Amount = Amount;
            this.BillingMonth = BillingMonth;
            this.BillingYear = BillingYear;
            this.Id = Id;
            this.PeriodEnd = PeriodEnd;
            this.PeriodStart = PeriodStart;
            this.Status = Status;
            this.SubscriberSecureId = SubscriberSecureId;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets BillingMonth
        /// </summary>
        [DataMember(Name="billingMonth", EmitDefaultValue=false)]
        public int? BillingMonth { get; set; }

        /// <summary>
        /// Gets or Sets BillingYear
        /// </summary>
        [DataMember(Name="billingYear", EmitDefaultValue=false)]
        public int? BillingYear { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets PeriodEnd
        /// </summary>
        [DataMember(Name="periodEnd", EmitDefaultValue=false)]
        public DateTime? PeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets PeriodStart
        /// </summary>
        [DataMember(Name="periodStart", EmitDefaultValue=false)]
        public DateTime? PeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberSecureId
        /// </summary>
        [DataMember(Name="subscriberSecureId", EmitDefaultValue=false)]
        public string SubscriberSecureId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BillingMonth: ").Append(BillingMonth).Append("\n");
            sb.Append("  BillingYear: ").Append(BillingYear).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PeriodEnd: ").Append(PeriodEnd).Append("\n");
            sb.Append("  PeriodStart: ").Append(PeriodStart).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubscriberSecureId: ").Append(SubscriberSecureId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="input">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BillingMonth == input.BillingMonth ||
                    (this.BillingMonth != null &&
                    this.BillingMonth.Equals(input.BillingMonth))
                ) && 
                (
                    this.BillingYear == input.BillingYear ||
                    (this.BillingYear != null &&
                    this.BillingYear.Equals(input.BillingYear))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PeriodEnd == input.PeriodEnd ||
                    (this.PeriodEnd != null &&
                    this.PeriodEnd.Equals(input.PeriodEnd))
                ) && 
                (
                    this.PeriodStart == input.PeriodStart ||
                    (this.PeriodStart != null &&
                    this.PeriodStart.Equals(input.PeriodStart))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubscriberSecureId == input.SubscriberSecureId ||
                    (this.SubscriberSecureId != null &&
                    this.SubscriberSecureId.Equals(input.SubscriberSecureId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BillingMonth != null)
                    hashCode = hashCode * 59 + this.BillingMonth.GetHashCode();
                if (this.BillingYear != null)
                    hashCode = hashCode * 59 + this.BillingYear.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PeriodEnd != null)
                    hashCode = hashCode * 59 + this.PeriodEnd.GetHashCode();
                if (this.PeriodStart != null)
                    hashCode = hashCode * 59 + this.PeriodStart.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubscriberSecureId != null)
                    hashCode = hashCode * 59 + this.SubscriberSecureId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
