/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// DeductionResult
    /// </summary>
    [DataContract]
    public partial class DeductionResult :  IEquatable<DeductionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeductionResult" /> class.
        /// </summary>
        /// <param name="Capacity">Capacity.</param>
        /// <param name="ConsumedResourceId">ConsumedResourceId.</param>
        /// <param name="OverUsage">OverUsage.</param>
        /// <param name="RequestedAmount">RequestedAmount.</param>
        /// <param name="SubscriptionId">SubscriptionId.</param>
        /// <param name="Usage">Usage.</param>
        public DeductionResult(decimal? Capacity = default(decimal?), long? ConsumedResourceId = default(long?), decimal? OverUsage = default(decimal?), long? RequestedAmount = default(long?), long? SubscriptionId = default(long?), decimal? Usage = default(decimal?))
        {
            this.Capacity = Capacity;
            this.ConsumedResourceId = ConsumedResourceId;
            this.OverUsage = OverUsage;
            this.RequestedAmount = RequestedAmount;
            this.SubscriptionId = SubscriptionId;
            this.Usage = Usage;
        }
        
        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public decimal? Capacity { get; set; }

        /// <summary>
        /// Gets or Sets ConsumedResourceId
        /// </summary>
        [DataMember(Name="consumedResourceId", EmitDefaultValue=false)]
        public long? ConsumedResourceId { get; set; }

        /// <summary>
        /// Gets or Sets OverUsage
        /// </summary>
        [DataMember(Name="overUsage", EmitDefaultValue=false)]
        public decimal? OverUsage { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name="requestedAmount", EmitDefaultValue=false)]
        public long? RequestedAmount { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public long? SubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public decimal? Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeductionResult {\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  ConsumedResourceId: ").Append(ConsumedResourceId).Append("\n");
            sb.Append("  OverUsage: ").Append(OverUsage).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeductionResult);
        }

        /// <summary>
        /// Returns true if DeductionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DeductionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeductionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Capacity == input.Capacity ||
                    (this.Capacity != null &&
                    this.Capacity.Equals(input.Capacity))
                ) && 
                (
                    this.ConsumedResourceId == input.ConsumedResourceId ||
                    (this.ConsumedResourceId != null &&
                    this.ConsumedResourceId.Equals(input.ConsumedResourceId))
                ) && 
                (
                    this.OverUsage == input.OverUsage ||
                    (this.OverUsage != null &&
                    this.OverUsage.Equals(input.OverUsage))
                ) && 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    (this.RequestedAmount != null &&
                    this.RequestedAmount.Equals(input.RequestedAmount))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Capacity != null)
                    hashCode = hashCode * 59 + this.Capacity.GetHashCode();
                if (this.ConsumedResourceId != null)
                    hashCode = hashCode * 59 + this.ConsumedResourceId.GetHashCode();
                if (this.OverUsage != null)
                    hashCode = hashCode * 59 + this.OverUsage.GetHashCode();
                if (this.RequestedAmount != null)
                    hashCode = hashCode * 59 + this.RequestedAmount.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
