/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.kodfarki.subscreasy.client.model
{
    /// <summary>
    /// ProfileInfoVM
    /// </summary>
    [DataContract]
    public partial class ProfileInfoVM :  IEquatable<ProfileInfoVM>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileInfoVM" /> class.
        /// </summary>
        /// <param name="ActiveProfiles">ActiveProfiles.</param>
        /// <param name="RibbonEnv">RibbonEnv.</param>
        /// <param name="Version">Version.</param>
        public ProfileInfoVM(List<string> ActiveProfiles = default(List<string>), string RibbonEnv = default(string), string Version = default(string))
        {
            this.ActiveProfiles = ActiveProfiles;
            this.RibbonEnv = RibbonEnv;
            this.Version = Version;
        }
        
        /// <summary>
        /// Gets or Sets ActiveProfiles
        /// </summary>
        [DataMember(Name="activeProfiles", EmitDefaultValue=false)]
        public List<string> ActiveProfiles { get; set; }

        /// <summary>
        /// Gets or Sets RibbonEnv
        /// </summary>
        [DataMember(Name="ribbonEnv", EmitDefaultValue=false)]
        public string RibbonEnv { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileInfoVM {\n");
            sb.Append("  ActiveProfiles: ").Append(ActiveProfiles).Append("\n");
            sb.Append("  RibbonEnv: ").Append(RibbonEnv).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileInfoVM);
        }

        /// <summary>
        /// Returns true if ProfileInfoVM instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileInfoVM to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileInfoVM input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveProfiles == input.ActiveProfiles ||
                    this.ActiveProfiles != null &&
                    this.ActiveProfiles.SequenceEqual(input.ActiveProfiles)
                ) && 
                (
                    this.RibbonEnv == input.RibbonEnv ||
                    (this.RibbonEnv != null &&
                    this.RibbonEnv.Equals(input.RibbonEnv))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveProfiles != null)
                    hashCode = hashCode * 59 + this.ActiveProfiles.GetHashCode();
                if (this.RibbonEnv != null)
                    hashCode = hashCode * 59 + this.RibbonEnv.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
