/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBankAccountResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// createBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>BankAccount</returns>
        BankAccount CreateBankAccountUsingPOST (BankAccount bankAccount);

        /// <summary>
        /// createBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> CreateBankAccountUsingPOSTWithHttpInfo (BankAccount bankAccount);
        /// <summary>
        /// deleteBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteBankAccountUsingDELETE (long? id);

        /// <summary>
        /// deleteBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBankAccountUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// getAllBankAccounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BankAccount&gt;</returns>
        List<BankAccount> GetAllBankAccountsUsingGET ();

        /// <summary>
        /// getAllBankAccounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BankAccount&gt;</returns>
        ApiResponse<List<BankAccount>> GetAllBankAccountsUsingGETWithHttpInfo ();
        /// <summary>
        /// getBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BankAccount</returns>
        BankAccount GetBankAccountUsingGET (long? id);

        /// <summary>
        /// getBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> GetBankAccountUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// getBankAccountsByCompany
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>List&lt;BankAccount&gt;</returns>
        List<BankAccount> GetBankAccountsByCompanyUsingGET (long? companyId);

        /// <summary>
        /// getBankAccountsByCompany
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>ApiResponse of List&lt;BankAccount&gt;</returns>
        ApiResponse<List<BankAccount>> GetBankAccountsByCompanyUsingGETWithHttpInfo (long? companyId);
        /// <summary>
        /// updateBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>BankAccount</returns>
        BankAccount UpdateBankAccountUsingPUT (BankAccount bankAccount);

        /// <summary>
        /// updateBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>ApiResponse of BankAccount</returns>
        ApiResponse<BankAccount> UpdateBankAccountUsingPUTWithHttpInfo (BankAccount bankAccount);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> CreateBankAccountUsingPOSTAsync (BankAccount bankAccount);

        /// <summary>
        /// createBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> CreateBankAccountUsingPOSTAsyncWithHttpInfo (BankAccount bankAccount);
        /// <summary>
        /// deleteBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBankAccountUsingDELETEAsync (long? id);

        /// <summary>
        /// deleteBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankAccountUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getAllBankAccounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BankAccount&gt;</returns>
        System.Threading.Tasks.Task<List<BankAccount>> GetAllBankAccountsUsingGETAsync ();

        /// <summary>
        /// getAllBankAccounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BankAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BankAccount>>> GetAllBankAccountsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// getBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> GetBankAccountUsingGETAsync (long? id);

        /// <summary>
        /// getBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> GetBankAccountUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getBankAccountsByCompany
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>Task of List&lt;BankAccount&gt;</returns>
        System.Threading.Tasks.Task<List<BankAccount>> GetBankAccountsByCompanyUsingGETAsync (long? companyId);

        /// <summary>
        /// getBankAccountsByCompany
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>Task of ApiResponse (List&lt;BankAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BankAccount>>> GetBankAccountsByCompanyUsingGETAsyncWithHttpInfo (long? companyId);
        /// <summary>
        /// updateBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of BankAccount</returns>
        System.Threading.Tasks.Task<BankAccount> UpdateBankAccountUsingPUTAsync (BankAccount bankAccount);

        /// <summary>
        /// updateBankAccount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccount>> UpdateBankAccountUsingPUTAsyncWithHttpInfo (BankAccount bankAccount);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BankAccountResourceApi : IBankAccountResourceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankAccountResourceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BankAccountResourceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// createBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>BankAccount</returns>
        public BankAccount CreateBankAccountUsingPOST (BankAccount bankAccount)
        {
             ApiResponse<BankAccount> localVarResponse = CreateBankAccountUsingPOSTWithHttpInfo(bankAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public ApiResponse< BankAccount > CreateBankAccountUsingPOSTWithHttpInfo (BankAccount bankAccount)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountResourceApi->CreateBankAccountUsingPOST");

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccountUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// createBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> CreateBankAccountUsingPOSTAsync (BankAccount bankAccount)
        {
             ApiResponse<BankAccount> localVarResponse = await CreateBankAccountUsingPOSTAsyncWithHttpInfo(bankAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccount>> CreateBankAccountUsingPOSTAsyncWithHttpInfo (BankAccount bankAccount)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountResourceApi->CreateBankAccountUsingPOST");

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankAccountUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// deleteBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteBankAccountUsingDELETE (long? id)
        {
             DeleteBankAccountUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// deleteBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBankAccountUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountResourceApi->DeleteBankAccountUsingDELETE");

            var localVarPath = "/api/bank-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankAccountUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deleteBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBankAccountUsingDELETEAsync (long? id)
        {
             await DeleteBankAccountUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deleteBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankAccountUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountResourceApi->DeleteBankAccountUsingDELETE");

            var localVarPath = "/api/bank-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankAccountUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getAllBankAccounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BankAccount&gt;</returns>
        public List<BankAccount> GetAllBankAccountsUsingGET ()
        {
             ApiResponse<List<BankAccount>> localVarResponse = GetAllBankAccountsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllBankAccounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BankAccount&gt;</returns>
        public ApiResponse< List<BankAccount> > GetAllBankAccountsUsingGETWithHttpInfo ()
        {

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBankAccountsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankAccount>)));
        }

        /// <summary>
        /// getAllBankAccounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BankAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<BankAccount>> GetAllBankAccountsUsingGETAsync ()
        {
             ApiResponse<List<BankAccount>> localVarResponse = await GetAllBankAccountsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllBankAccounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BankAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BankAccount>>> GetAllBankAccountsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBankAccountsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankAccount>)));
        }

        /// <summary>
        /// getBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>BankAccount</returns>
        public BankAccount GetBankAccountUsingGET (long? id)
        {
             ApiResponse<BankAccount> localVarResponse = GetBankAccountUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public ApiResponse< BankAccount > GetBankAccountUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountResourceApi->GetBankAccountUsingGET");

            var localVarPath = "/api/bank-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// getBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> GetBankAccountUsingGETAsync (long? id)
        {
             ApiResponse<BankAccount> localVarResponse = await GetBankAccountUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccount>> GetBankAccountUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BankAccountResourceApi->GetBankAccountUsingGET");

            var localVarPath = "/api/bank-accounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// getBankAccountsByCompany 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>List&lt;BankAccount&gt;</returns>
        public List<BankAccount> GetBankAccountsByCompanyUsingGET (long? companyId)
        {
             ApiResponse<List<BankAccount>> localVarResponse = GetBankAccountsByCompanyUsingGETWithHttpInfo(companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getBankAccountsByCompany 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>ApiResponse of List&lt;BankAccount&gt;</returns>
        public ApiResponse< List<BankAccount> > GetBankAccountsByCompanyUsingGETWithHttpInfo (long? companyId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling BankAccountResourceApi->GetBankAccountsByCompanyUsingGET");

            var localVarPath = "/api/bank-accounts/company/{companyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountsByCompanyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankAccount>)));
        }

        /// <summary>
        /// getBankAccountsByCompany 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>Task of List&lt;BankAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<BankAccount>> GetBankAccountsByCompanyUsingGETAsync (long? companyId)
        {
             ApiResponse<List<BankAccount>> localVarResponse = await GetBankAccountsByCompanyUsingGETAsyncWithHttpInfo(companyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getBankAccountsByCompany 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">companyId</param>
        /// <returns>Task of ApiResponse (List&lt;BankAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BankAccount>>> GetBankAccountsByCompanyUsingGETAsyncWithHttpInfo (long? companyId)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
                throw new ApiException(400, "Missing required parameter 'companyId' when calling BankAccountResourceApi->GetBankAccountsByCompanyUsingGET");

            var localVarPath = "/api/bank-accounts/company/{companyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarPathParams.Add("companyId", Configuration.ApiClient.ParameterToString(companyId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankAccountsByCompanyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankAccount>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankAccount>)));
        }

        /// <summary>
        /// updateBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>BankAccount</returns>
        public BankAccount UpdateBankAccountUsingPUT (BankAccount bankAccount)
        {
             ApiResponse<BankAccount> localVarResponse = UpdateBankAccountUsingPUTWithHttpInfo(bankAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>ApiResponse of BankAccount</returns>
        public ApiResponse< BankAccount > UpdateBankAccountUsingPUTWithHttpInfo (BankAccount bankAccount)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountResourceApi->UpdateBankAccountUsingPUT");

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

        /// <summary>
        /// updateBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of BankAccount</returns>
        public async System.Threading.Tasks.Task<BankAccount> UpdateBankAccountUsingPUTAsync (BankAccount bankAccount)
        {
             ApiResponse<BankAccount> localVarResponse = await UpdateBankAccountUsingPUTAsyncWithHttpInfo(bankAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateBankAccount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankAccount">bankAccount</param>
        /// <returns>Task of ApiResponse (BankAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccount>> UpdateBankAccountUsingPUTAsyncWithHttpInfo (BankAccount bankAccount)
        {
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountResourceApi->UpdateBankAccountUsingPUT");

            var localVarPath = "/api/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankAccountUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankAccount) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccount)));
        }

    }
}
