/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebHookServerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// subscriberCreated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriberCreatedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriberCreated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriberCreatedUsingPOSTWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriberUpdated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriberUpdatedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriberUpdated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriberUpdatedUsingPOSTWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionEnded
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriptionEndedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriptionEnded
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionEndedUsingPOSTWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionRenewalFailed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriptionRenewalFailedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriptionRenewalFailed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionRenewalFailedUsingPOSTWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionRenewed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriptionRenewedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriptionRenewed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionRenewedUsingPOSTWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionStarted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        Object SubscriptionStartedUsingPOST (WebHookRequest r);

        /// <summary>
        /// subscriptionStarted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SubscriptionStartedUsingPOSTWithHttpInfo (WebHookRequest r);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// subscriberCreated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriberCreatedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriberCreated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberCreatedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriberUpdated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriberUpdatedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriberUpdated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberUpdatedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionEnded
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionEndedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriptionEnded
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionEndedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionRenewalFailed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionRenewalFailedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriptionRenewalFailed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionRenewalFailedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionRenewed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionRenewedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriptionRenewed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionRenewedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        /// <summary>
        /// subscriptionStarted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SubscriptionStartedUsingPOSTAsync (WebHookRequest r);

        /// <summary>
        /// subscriptionStarted
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionStartedUsingPOSTAsyncWithHttpInfo (WebHookRequest r);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebHookServerApi : IWebHookServerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebHookServerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebHookServerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// subscriberCreated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriberCreatedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriberCreatedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriberCreated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriberCreatedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriberCreatedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscriber-created";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriberCreatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriberCreated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriberCreatedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriberCreatedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriberCreated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberCreatedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriberCreatedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscriber-created";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriberCreatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriberUpdated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriberUpdatedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriberUpdatedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriberUpdated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriberUpdatedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriberUpdatedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscriber-updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriberUpdatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriberUpdated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriberUpdatedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriberUpdatedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriberUpdated 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriberUpdatedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriberUpdatedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscriber-updated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriberUpdatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionEnded 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriptionEndedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriptionEndedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriptionEnded 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionEndedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionEndedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-ended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionEndedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionEnded 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionEndedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionEndedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriptionEnded 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionEndedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionEndedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-ended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionEndedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionRenewalFailed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriptionRenewalFailedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriptionRenewalFailedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriptionRenewalFailed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionRenewalFailedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionRenewalFailedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-renewal-failed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionRenewalFailedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionRenewalFailed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionRenewalFailedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionRenewalFailedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriptionRenewalFailed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionRenewalFailedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionRenewalFailedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-renewal-failed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionRenewalFailedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionRenewed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriptionRenewedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriptionRenewedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriptionRenewed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionRenewedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionRenewedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-renewed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionRenewedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionRenewed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionRenewedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionRenewedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriptionRenewed 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionRenewedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionRenewedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-renewed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionRenewedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionStarted 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Object</returns>
        public Object SubscriptionStartedUsingPOST (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = SubscriptionStartedUsingPOSTWithHttpInfo(r);
             return localVarResponse.Data;
        }

        /// <summary>
        /// subscriptionStarted 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > SubscriptionStartedUsingPOSTWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionStartedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-started";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionStartedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// subscriptionStarted 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SubscriptionStartedUsingPOSTAsync (WebHookRequest r)
        {
             ApiResponse<Object> localVarResponse = await SubscriptionStartedUsingPOSTAsyncWithHttpInfo(r);
             return localVarResponse.Data;

        }

        /// <summary>
        /// subscriptionStarted 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="r">r</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubscriptionStartedUsingPOSTAsyncWithHttpInfo (WebHookRequest r)
        {
            // verify the required parameter 'r' is set
            if (r == null)
                throw new ApiException(400, "Missing required parameter 'r' when calling WebHookServerApi->SubscriptionStartedUsingPOST");

            var localVarPath = "/subscreasy/webhook/subscription-started";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (r != null && r.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(r); // http body (model) parameter
            }
            else
            {
                localVarPostBody = r; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscriptionStartedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
