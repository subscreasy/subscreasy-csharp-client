/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Subsription</returns>
        Subsription CancelSubscriptionUsingPUT (Cancellation cancellation);

        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>ApiResponse of Subsription</returns>
        ApiResponse<Subsription> CancelSubscriptionUsingPUTWithHttpInfo (Cancellation cancellation);
        /// <summary>
        /// changePaymentMethod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Subsription</returns>
        Subsription ChangePaymentMethodUsingPUT (long? subscriptionId);

        /// <summary>
        /// changePaymentMethod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>ApiResponse of Subsription</returns>
        ApiResponse<Subsription> ChangePaymentMethodUsingPUTWithHttpInfo (long? subscriptionId);
        /// <summary>
        /// chargeEarly
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Job</returns>
        Job ChargeEarlyUsingPUT (long? subscriptionId);

        /// <summary>
        /// chargeEarly
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> ChargeEarlyUsingPUTWithHttpInfo (long? subscriptionId);
        /// <summary>
        /// getActiveSubscriptionsByEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetActiveSubscriptionsByEmailUsingGET (string email);

        /// <summary>
        /// getActiveSubscriptionsByEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetActiveSubscriptionsByEmailUsingGETWithHttpInfo (string email);
        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetActiveSubscriptionsUsingGET (string secureId);

        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetActiveSubscriptionsUsingGETWithHttpInfo (string secureId);
        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetAllCompanySubscriptionsUsingGET (string id);

        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetAllCompanySubscriptionsUsingGETWithHttpInfo (string id);
        /// <summary>
        /// getAllSubscriptionsByOffer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetAllSubscriptionsByOfferUsingGET (long? id, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getAllSubscriptionsByOffer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetAllSubscriptionsByOfferUsingGETWithHttpInfo (long? id, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Subsription</returns>
        Subsription GetSubscriptionUsingGET (long? id);

        /// <summary>
        /// getSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Subsription</returns>
        ApiResponse<Subsription> GetSubscriptionUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetSubscriptionsByMerchantSubscriberIdUsingGET (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetSubscriptionsByMerchantSubscriberIdUsingGETWithHttpInfo (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getSubscriptionsByStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetSubscriptionsByStatusUsingGET (string status, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getSubscriptionsByStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetSubscriptionsByStatusUsingGETWithHttpInfo (string status, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>StartSubscriptionResult</returns>
        StartSubscriptionResult StartSubscriptionUsingPOST (StartSubscriptionRequest request);

        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of StartSubscriptionResult</returns>
        ApiResponse<StartSubscriptionResult> StartSubscriptionUsingPOSTWithHttpInfo (StartSubscriptionRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of Subsription</returns>
        System.Threading.Tasks.Task<Subsription> CancelSubscriptionUsingPUTAsync (Cancellation cancellation);

        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subsription>> CancelSubscriptionUsingPUTAsyncWithHttpInfo (Cancellation cancellation);
        /// <summary>
        /// changePaymentMethod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of Subsription</returns>
        System.Threading.Tasks.Task<Subsription> ChangePaymentMethodUsingPUTAsync (long? subscriptionId);

        /// <summary>
        /// changePaymentMethod
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subsription>> ChangePaymentMethodUsingPUTAsyncWithHttpInfo (long? subscriptionId);
        /// <summary>
        /// chargeEarly
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> ChargeEarlyUsingPUTAsync (long? subscriptionId);

        /// <summary>
        /// chargeEarly
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> ChargeEarlyUsingPUTAsyncWithHttpInfo (long? subscriptionId);
        /// <summary>
        /// getActiveSubscriptionsByEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsByEmailUsingGETAsync (string email);

        /// <summary>
        /// getActiveSubscriptionsByEmail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsByEmailUsingGETAsyncWithHttpInfo (string email);
        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsUsingGETAsync (string secureId);

        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsUsingGETAsyncWithHttpInfo (string secureId);
        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetAllCompanySubscriptionsUsingGETAsync (string id);

        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// getAllSubscriptionsByOffer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetAllSubscriptionsByOfferUsingGETAsync (long? id, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getAllSubscriptionsByOffer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllSubscriptionsByOfferUsingGETAsyncWithHttpInfo (long? id, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of Subsription</returns>
        System.Threading.Tasks.Task<Subsription> GetSubscriptionUsingGETAsync (long? id);

        /// <summary>
        /// getSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subsription>> GetSubscriptionUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetSubscriptionsByMerchantSubscriberIdUsingGETAsync (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetSubscriptionsByMerchantSubscriberIdUsingGETAsyncWithHttpInfo (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getSubscriptionsByStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetSubscriptionsByStatusUsingGETAsync (string status, int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getSubscriptionsByStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetSubscriptionsByStatusUsingGETAsyncWithHttpInfo (string status, int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of StartSubscriptionResult</returns>
        System.Threading.Tasks.Task<StartSubscriptionResult> StartSubscriptionUsingPOSTAsync (StartSubscriptionRequest request);

        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (StartSubscriptionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartSubscriptionResult>> StartSubscriptionUsingPOSTAsyncWithHttpInfo (StartSubscriptionRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionResourceApi : ISubscriptionResourceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionResourceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionResourceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Subsription</returns>
        public Subsription CancelSubscriptionUsingPUT (Cancellation cancellation)
        {
             ApiResponse<Subsription> localVarResponse = CancelSubscriptionUsingPUTWithHttpInfo(cancellation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>ApiResponse of Subsription</returns>
        public ApiResponse< Subsription > CancelSubscriptionUsingPUTWithHttpInfo (Cancellation cancellation)
        {
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling SubscriptionResourceApi->CancelSubscriptionUsingPUT");

            var localVarPath = "/api/subscriptions/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscriptionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of Subsription</returns>
        public async System.Threading.Tasks.Task<Subsription> CancelSubscriptionUsingPUTAsync (Cancellation cancellation)
        {
             ApiResponse<Subsription> localVarResponse = await CancelSubscriptionUsingPUTAsyncWithHttpInfo(cancellation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subsription>> CancelSubscriptionUsingPUTAsyncWithHttpInfo (Cancellation cancellation)
        {
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling SubscriptionResourceApi->CancelSubscriptionUsingPUT");

            var localVarPath = "/api/subscriptions/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscriptionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// changePaymentMethod 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Subsription</returns>
        public Subsription ChangePaymentMethodUsingPUT (long? subscriptionId)
        {
             ApiResponse<Subsription> localVarResponse = ChangePaymentMethodUsingPUTWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// changePaymentMethod 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>ApiResponse of Subsription</returns>
        public ApiResponse< Subsription > ChangePaymentMethodUsingPUTWithHttpInfo (long? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionResourceApi->ChangePaymentMethodUsingPUT");

            var localVarPath = "/api/subscriptions/change-payment-method/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePaymentMethodUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// changePaymentMethod 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of Subsription</returns>
        public async System.Threading.Tasks.Task<Subsription> ChangePaymentMethodUsingPUTAsync (long? subscriptionId)
        {
             ApiResponse<Subsription> localVarResponse = await ChangePaymentMethodUsingPUTAsyncWithHttpInfo(subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// changePaymentMethod 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subsription>> ChangePaymentMethodUsingPUTAsyncWithHttpInfo (long? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionResourceApi->ChangePaymentMethodUsingPUT");

            var localVarPath = "/api/subscriptions/change-payment-method/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePaymentMethodUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// chargeEarly 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Job</returns>
        public Job ChargeEarlyUsingPUT (long? subscriptionId)
        {
             ApiResponse<Job> localVarResponse = ChargeEarlyUsingPUTWithHttpInfo(subscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// chargeEarly 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > ChargeEarlyUsingPUTWithHttpInfo (long? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionResourceApi->ChargeEarlyUsingPUT");

            var localVarPath = "/api/subscriptions/charge/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargeEarlyUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// chargeEarly 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> ChargeEarlyUsingPUTAsync (long? subscriptionId)
        {
             ApiResponse<Job> localVarResponse = await ChargeEarlyUsingPUTAsyncWithHttpInfo(subscriptionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// chargeEarly 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscriptionId</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> ChargeEarlyUsingPUTAsyncWithHttpInfo (long? subscriptionId)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionResourceApi->ChargeEarlyUsingPUT");

            var localVarPath = "/api/subscriptions/charge/{subscriptionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionId != null) localVarPathParams.Add("subscriptionId", Configuration.ApiClient.ParameterToString(subscriptionId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChargeEarlyUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// getActiveSubscriptionsByEmail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetActiveSubscriptionsByEmailUsingGET (string email)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetActiveSubscriptionsByEmailUsingGETWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getActiveSubscriptionsByEmail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetActiveSubscriptionsByEmailUsingGETWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubscriptionResourceApi->GetActiveSubscriptionsByEmailUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsByEmailUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getActiveSubscriptionsByEmail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsByEmailUsingGETAsync (string email)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetActiveSubscriptionsByEmailUsingGETAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getActiveSubscriptionsByEmail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">email</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsByEmailUsingGETAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubscriptionResourceApi->GetActiveSubscriptionsByEmailUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/email/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsByEmailUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetActiveSubscriptionsUsingGET (string secureId)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetActiveSubscriptionsUsingGETWithHttpInfo(secureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetActiveSubscriptionsUsingGETWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling SubscriptionResourceApi->GetActiveSubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsUsingGETAsync (string secureId)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetActiveSubscriptionsUsingGETAsyncWithHttpInfo(secureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsUsingGETAsyncWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling SubscriptionResourceApi->GetActiveSubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetAllCompanySubscriptionsUsingGET (string id)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetAllCompanySubscriptionsUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetAllCompanySubscriptionsUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetAllCompanySubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/company/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCompanySubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetAllCompanySubscriptionsUsingGETAsync (string id)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetAllCompanySubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/company/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCompanySubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllSubscriptionsByOffer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetAllSubscriptionsByOfferUsingGET (long? id, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetAllSubscriptionsByOfferUsingGETWithHttpInfo(id, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllSubscriptionsByOffer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetAllSubscriptionsByOfferUsingGETWithHttpInfo (long? id, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetAllSubscriptionsByOfferUsingGET");

            var localVarPath = "/api/subscriptions/offer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubscriptionsByOfferUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllSubscriptionsByOffer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetAllSubscriptionsByOfferUsingGETAsync (long? id, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetAllSubscriptionsByOfferUsingGETAsyncWithHttpInfo(id, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllSubscriptionsByOffer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllSubscriptionsByOfferUsingGETAsyncWithHttpInfo (long? id, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetAllSubscriptionsByOfferUsingGET");

            var localVarPath = "/api/subscriptions/offer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllSubscriptionsByOfferUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Subsription</returns>
        public Subsription GetSubscriptionUsingGET (long? id)
        {
             ApiResponse<Subsription> localVarResponse = GetSubscriptionUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Subsription</returns>
        public ApiResponse< Subsription > GetSubscriptionUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetSubscriptionUsingGET");

            var localVarPath = "/api/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// getSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of Subsription</returns>
        public async System.Threading.Tasks.Task<Subsription> GetSubscriptionUsingGETAsync (long? id)
        {
             ApiResponse<Subsription> localVarResponse = await GetSubscriptionUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subsription>> GetSubscriptionUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionResourceApi->GetSubscriptionUsingGET");

            var localVarPath = "/api/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetSubscriptionsByMerchantSubscriberIdUsingGET (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetSubscriptionsByMerchantSubscriberIdUsingGETWithHttpInfo(merchantSubscriberId, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetSubscriptionsByMerchantSubscriberIdUsingGETWithHttpInfo (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'merchantSubscriberId' is set
            if (merchantSubscriberId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSubscriberId' when calling SubscriptionResourceApi->GetSubscriptionsByMerchantSubscriberIdUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/m/{merchantSubscriberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSubscriberId != null) localVarPathParams.Add("merchantSubscriberId", Configuration.ApiClient.ParameterToString(merchantSubscriberId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsByMerchantSubscriberIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetSubscriptionsByMerchantSubscriberIdUsingGETAsync (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetSubscriptionsByMerchantSubscriberIdUsingGETAsyncWithHttpInfo(merchantSubscriberId, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSubscriptionsByMerchantSubscriberId 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantSubscriberId">merchantSubscriberId</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetSubscriptionsByMerchantSubscriberIdUsingGETAsyncWithHttpInfo (string merchantSubscriberId, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'merchantSubscriberId' is set
            if (merchantSubscriberId == null)
                throw new ApiException(400, "Missing required parameter 'merchantSubscriberId' when calling SubscriptionResourceApi->GetSubscriptionsByMerchantSubscriberIdUsingGET");

            var localVarPath = "/api/subscriptions/subscriber/m/{merchantSubscriberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantSubscriberId != null) localVarPathParams.Add("merchantSubscriberId", Configuration.ApiClient.ParameterToString(merchantSubscriberId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsByMerchantSubscriberIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getSubscriptionsByStatus 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetSubscriptionsByStatusUsingGET (string status, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetSubscriptionsByStatusUsingGETWithHttpInfo(status, page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSubscriptionsByStatus 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetSubscriptionsByStatusUsingGETWithHttpInfo (string status, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SubscriptionResourceApi->GetSubscriptionsByStatusUsingGET");

            var localVarPath = "/api/subscriptions/status/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarPathParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsByStatusUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getSubscriptionsByStatus 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetSubscriptionsByStatusUsingGETAsync (string status, int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetSubscriptionsByStatusUsingGETAsyncWithHttpInfo(status, page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSubscriptionsByStatus 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">status</param>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetSubscriptionsByStatusUsingGETAsyncWithHttpInfo (string status, int? page = null, int? size = null, List<string> sort = null)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SubscriptionResourceApi->GetSubscriptionsByStatusUsingGET");

            var localVarPath = "/api/subscriptions/status/{status}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarPathParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // path parameter
            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriptionsByStatusUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>StartSubscriptionResult</returns>
        public StartSubscriptionResult StartSubscriptionUsingPOST (StartSubscriptionRequest request)
        {
             ApiResponse<StartSubscriptionResult> localVarResponse = StartSubscriptionUsingPOSTWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of StartSubscriptionResult</returns>
        public ApiResponse< StartSubscriptionResult > StartSubscriptionUsingPOSTWithHttpInfo (StartSubscriptionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SubscriptionResourceApi->StartSubscriptionUsingPOST");

            var localVarPath = "/api/subscriptions/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartSubscriptionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartSubscriptionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartSubscriptionResult)));
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of StartSubscriptionResult</returns>
        public async System.Threading.Tasks.Task<StartSubscriptionResult> StartSubscriptionUsingPOSTAsync (StartSubscriptionRequest request)
        {
             ApiResponse<StartSubscriptionResult> localVarResponse = await StartSubscriptionUsingPOSTAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (StartSubscriptionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartSubscriptionResult>> StartSubscriptionUsingPOSTAsyncWithHttpInfo (StartSubscriptionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SubscriptionResourceApi->StartSubscriptionUsingPOST");

            var localVarPath = "/api/subscriptions/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartSubscriptionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartSubscriptionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartSubscriptionResult)));
        }

    }
}
