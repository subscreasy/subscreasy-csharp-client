/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargingLogResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// createChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ChargingLog</returns>
        ChargingLog CreateChargingLogUsingPOST (ChargingLog chargingLog);

        /// <summary>
        /// createChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        ApiResponse<ChargingLog> CreateChargingLogUsingPOSTWithHttpInfo (ChargingLog chargingLog);
        /// <summary>
        /// deleteChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        void DeleteChargingLogUsingDELETE (long? id);

        /// <summary>
        /// deleteChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChargingLogUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// getAllChargingLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;ChargingLog&gt;</returns>
        List<ChargingLog> GetAllChargingLogsUsingGET (int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getAllChargingLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChargingLog&gt;</returns>
        ApiResponse<List<ChargingLog>> GetAllChargingLogsUsingGETWithHttpInfo (int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ChargingLog</returns>
        ChargingLog GetChargingLogUsingGET (long? id);

        /// <summary>
        /// getChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        ApiResponse<ChargingLog> GetChargingLogUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>ChargingLog</returns>
        ChargingLog RefundUsingPOST (long? chargingLogId);

        /// <summary>
        /// refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        ApiResponse<ChargingLog> RefundUsingPOSTWithHttpInfo (long? chargingLogId);
        /// <summary>
        /// updateChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ChargingLog</returns>
        ChargingLog UpdateChargingLogUsingPUT (ChargingLog chargingLog);

        /// <summary>
        /// updateChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        ApiResponse<ChargingLog> UpdateChargingLogUsingPUTWithHttpInfo (ChargingLog chargingLog);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ChargingLog</returns>
        System.Threading.Tasks.Task<ChargingLog> CreateChargingLogUsingPOSTAsync (ChargingLog chargingLog);

        /// <summary>
        /// createChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLog>> CreateChargingLogUsingPOSTAsyncWithHttpInfo (ChargingLog chargingLog);
        /// <summary>
        /// deleteChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChargingLogUsingDELETEAsync (long? id);

        /// <summary>
        /// deleteChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChargingLogUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getAllChargingLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;ChargingLog&gt;</returns>
        System.Threading.Tasks.Task<List<ChargingLog>> GetAllChargingLogsUsingGETAsync (int? page = null, int? size = null, List<string> sort = null);

        /// <summary>
        /// getAllChargingLogs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChargingLog>>> GetAllChargingLogsUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, List<string> sort = null);
        /// <summary>
        /// getChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ChargingLog</returns>
        System.Threading.Tasks.Task<ChargingLog> GetChargingLogUsingGETAsync (long? id);

        /// <summary>
        /// getChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLog>> GetChargingLogUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>Task of ChargingLog</returns>
        System.Threading.Tasks.Task<ChargingLog> RefundUsingPOSTAsync (long? chargingLogId);

        /// <summary>
        /// refund
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLog>> RefundUsingPOSTAsyncWithHttpInfo (long? chargingLogId);
        /// <summary>
        /// updateChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ChargingLog</returns>
        System.Threading.Tasks.Task<ChargingLog> UpdateChargingLogUsingPUTAsync (ChargingLog chargingLog);

        /// <summary>
        /// updateChargingLog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLog>> UpdateChargingLogUsingPUTAsyncWithHttpInfo (ChargingLog chargingLog);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargingLogResourceApi : IChargingLogResourceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLogResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargingLogResourceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLogResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargingLogResourceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// createChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ChargingLog</returns>
        public ChargingLog CreateChargingLogUsingPOST (ChargingLog chargingLog)
        {
             ApiResponse<ChargingLog> localVarResponse = CreateChargingLogUsingPOSTWithHttpInfo(chargingLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        public ApiResponse< ChargingLog > CreateChargingLogUsingPOSTWithHttpInfo (ChargingLog chargingLog)
        {
            // verify the required parameter 'chargingLog' is set
            if (chargingLog == null)
                throw new ApiException(400, "Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->CreateChargingLogUsingPOST");

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLog != null && chargingLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargingLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargingLog; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChargingLogUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// createChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ChargingLog</returns>
        public async System.Threading.Tasks.Task<ChargingLog> CreateChargingLogUsingPOSTAsync (ChargingLog chargingLog)
        {
             ApiResponse<ChargingLog> localVarResponse = await CreateChargingLogUsingPOSTAsyncWithHttpInfo(chargingLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargingLog>> CreateChargingLogUsingPOSTAsyncWithHttpInfo (ChargingLog chargingLog)
        {
            // verify the required parameter 'chargingLog' is set
            if (chargingLog == null)
                throw new ApiException(400, "Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->CreateChargingLogUsingPOST");

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLog != null && chargingLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargingLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargingLog; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChargingLogUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// deleteChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns></returns>
        public void DeleteChargingLogUsingDELETE (long? id)
        {
             DeleteChargingLogUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// deleteChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChargingLogUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargingLogResourceApi->DeleteChargingLogUsingDELETE");

            var localVarPath = "/api/charging-logs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChargingLogUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// deleteChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChargingLogUsingDELETEAsync (long? id)
        {
             await DeleteChargingLogUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// deleteChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChargingLogUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargingLogResourceApi->DeleteChargingLogUsingDELETE");

            var localVarPath = "/api/charging-logs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChargingLogUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getAllChargingLogs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>List&lt;ChargingLog&gt;</returns>
        public List<ChargingLog> GetAllChargingLogsUsingGET (int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<ChargingLog>> localVarResponse = GetAllChargingLogsUsingGETWithHttpInfo(page, size, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllChargingLogs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>ApiResponse of List&lt;ChargingLog&gt;</returns>
        public ApiResponse< List<ChargingLog> > GetAllChargingLogsUsingGETWithHttpInfo (int? page = null, int? size = null, List<string> sort = null)
        {

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChargingLogsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChargingLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChargingLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChargingLog>)));
        }

        /// <summary>
        /// getAllChargingLogs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of List&lt;ChargingLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChargingLog>> GetAllChargingLogsUsingGETAsync (int? page = null, int? size = null, List<string> sort = null)
        {
             ApiResponse<List<ChargingLog>> localVarResponse = await GetAllChargingLogsUsingGETAsyncWithHttpInfo(page, size, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllChargingLogs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number of the requested page (optional)</param>
        /// <param name="size">Size of a page (optional)</param>
        /// <param name="sort">Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChargingLog>>> GetAllChargingLogsUsingGETAsyncWithHttpInfo (int? page = null, int? size = null, List<string> sort = null)
        {

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "sort", sort)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChargingLogsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChargingLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChargingLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChargingLog>)));
        }

        /// <summary>
        /// getChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ChargingLog</returns>
        public ChargingLog GetChargingLogUsingGET (long? id)
        {
             ApiResponse<ChargingLog> localVarResponse = GetChargingLogUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        public ApiResponse< ChargingLog > GetChargingLogUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargingLogResourceApi->GetChargingLogUsingGET");

            var localVarPath = "/api/charging-logs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChargingLogUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// getChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ChargingLog</returns>
        public async System.Threading.Tasks.Task<ChargingLog> GetChargingLogUsingGETAsync (long? id)
        {
             ApiResponse<ChargingLog> localVarResponse = await GetChargingLogUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargingLog>> GetChargingLogUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ChargingLogResourceApi->GetChargingLogUsingGET");

            var localVarPath = "/api/charging-logs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChargingLogUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// refund 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>ChargingLog</returns>
        public ChargingLog RefundUsingPOST (long? chargingLogId)
        {
             ApiResponse<ChargingLog> localVarResponse = RefundUsingPOSTWithHttpInfo(chargingLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// refund 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        public ApiResponse< ChargingLog > RefundUsingPOSTWithHttpInfo (long? chargingLogId)
        {
            // verify the required parameter 'chargingLogId' is set
            if (chargingLogId == null)
                throw new ApiException(400, "Missing required parameter 'chargingLogId' when calling ChargingLogResourceApi->RefundUsingPOST");

            var localVarPath = "/api/charging-logs/refund/{chargingLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLogId != null) localVarPathParams.Add("chargingLogId", Configuration.ApiClient.ParameterToString(chargingLogId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// refund 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>Task of ChargingLog</returns>
        public async System.Threading.Tasks.Task<ChargingLog> RefundUsingPOSTAsync (long? chargingLogId)
        {
             ApiResponse<ChargingLog> localVarResponse = await RefundUsingPOSTAsyncWithHttpInfo(chargingLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// refund 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLogId">chargingLogId</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargingLog>> RefundUsingPOSTAsyncWithHttpInfo (long? chargingLogId)
        {
            // verify the required parameter 'chargingLogId' is set
            if (chargingLogId == null)
                throw new ApiException(400, "Missing required parameter 'chargingLogId' when calling ChargingLogResourceApi->RefundUsingPOST");

            var localVarPath = "/api/charging-logs/refund/{chargingLogId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLogId != null) localVarPathParams.Add("chargingLogId", Configuration.ApiClient.ParameterToString(chargingLogId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefundUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// updateChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ChargingLog</returns>
        public ChargingLog UpdateChargingLogUsingPUT (ChargingLog chargingLog)
        {
             ApiResponse<ChargingLog> localVarResponse = UpdateChargingLogUsingPUTWithHttpInfo(chargingLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// updateChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>ApiResponse of ChargingLog</returns>
        public ApiResponse< ChargingLog > UpdateChargingLogUsingPUTWithHttpInfo (ChargingLog chargingLog)
        {
            // verify the required parameter 'chargingLog' is set
            if (chargingLog == null)
                throw new ApiException(400, "Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->UpdateChargingLogUsingPUT");

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLog != null && chargingLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargingLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargingLog; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChargingLogUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

        /// <summary>
        /// updateChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ChargingLog</returns>
        public async System.Threading.Tasks.Task<ChargingLog> UpdateChargingLogUsingPUTAsync (ChargingLog chargingLog)
        {
             ApiResponse<ChargingLog> localVarResponse = await UpdateChargingLogUsingPUTAsyncWithHttpInfo(chargingLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// updateChargingLog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLog">chargingLog</param>
        /// <returns>Task of ApiResponse (ChargingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargingLog>> UpdateChargingLogUsingPUTAsyncWithHttpInfo (ChargingLog chargingLog)
        {
            // verify the required parameter 'chargingLog' is set
            if (chargingLog == null)
                throw new ApiException(400, "Missing required parameter 'chargingLog' when calling ChargingLogResourceApi->UpdateChargingLogUsingPUT");

            var localVarPath = "/api/charging-logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chargingLog != null && chargingLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chargingLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chargingLog; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChargingLogUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChargingLog) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargingLog)));
        }

    }
}
