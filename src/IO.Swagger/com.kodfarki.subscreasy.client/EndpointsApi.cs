/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>bool?</returns>
        bool? AuthorizeUsingPUT (Authorization authorization);

        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> AuthorizeUsingPUTWithHttpInfo (Authorization authorization);
        /// <summary>
        /// deduct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>DeductionResult</returns>
        DeductionResult DeductUsingPUT (Deduction deduction);

        /// <summary>
        /// deduct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>ApiResponse of DeductionResult</returns>
        ApiResponse<DeductionResult> DeductUsingPUTWithHttpInfo (Deduction deduction);
        /// <summary>
        /// getAuthorizedServices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>AuthorizedServicesResponse</returns>
        AuthorizedServicesResponse GetAuthorizedServicesUsingGET (string secureId);

        /// <summary>
        /// getAuthorizedServices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of AuthorizedServicesResponse</returns>
        ApiResponse<AuthorizedServicesResponse> GetAuthorizedServicesUsingGETWithHttpInfo (string secureId);
        /// <summary>
        /// getChargingLogBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ChargingLog&gt;</returns>
        List<ChargingLog> GetChargingLogBySubscriptionUsingGET (long? id);

        /// <summary>
        /// getChargingLogBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ChargingLog&gt;</returns>
        ApiResponse<List<ChargingLog>> GetChargingLogBySubscriptionUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// getCustomerTotalAmount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>long?</returns>
        long? GetCustomerTotalAmountUsingGET (string id);

        /// <summary>
        /// getCustomerTotalAmount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> GetCustomerTotalAmountUsingGETWithHttpInfo (string id);
        /// <summary>
        /// getInvoiceDetails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Object</returns>
        Object GetInvoiceDetailsUsingGET (InvoiceRequest invoiceRequest);

        /// <summary>
        /// getInvoiceDetails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetInvoiceDetailsUsingGETWithHttpInfo (InvoiceRequest invoiceRequest);
        /// <summary>
        /// getMessageTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>MessageTemplate</returns>
        MessageTemplate GetMessageTemplateUsingGET (string lifecycleEventName);

        /// <summary>
        /// getMessageTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        ApiResponse<MessageTemplate> GetMessageTemplateUsingGETWithHttpInfo (string lifecycleEventName);
        /// <summary>
        /// getServiceInstancesBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ServiceInstanceResult&gt;</returns>
        List<ServiceInstanceResult> GetServiceInstancesBySubscriptionUsingGET (long? id);

        /// <summary>
        /// getServiceInstancesBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ServiceInstanceResult&gt;</returns>
        ApiResponse<List<ServiceInstanceResult>> GetServiceInstancesBySubscriptionUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ServiceOfferingResult&gt;</returns>
        List<ServiceOfferingResult> GetServiceOfferingsBySubscriptionPlanUsingGET (long? id);

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ServiceOfferingResult&gt;</returns>
        ApiResponse<List<ServiceOfferingResult>> GetServiceOfferingsBySubscriptionPlanUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// getTotalRevenuePerMonth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetTotalRevenuePerMonthUsingGET (long? id);

        /// <summary>
        /// getTotalRevenuePerMonth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetTotalRevenuePerMonthUsingGETWithHttpInfo (long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> AuthorizeUsingPUTAsync (Authorization authorization);

        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> AuthorizeUsingPUTAsyncWithHttpInfo (Authorization authorization);
        /// <summary>
        /// deduct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>Task of DeductionResult</returns>
        System.Threading.Tasks.Task<DeductionResult> DeductUsingPUTAsync (Deduction deduction);

        /// <summary>
        /// deduct
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>Task of ApiResponse (DeductionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeductionResult>> DeductUsingPUTAsyncWithHttpInfo (Deduction deduction);
        /// <summary>
        /// getAuthorizedServices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of AuthorizedServicesResponse</returns>
        System.Threading.Tasks.Task<AuthorizedServicesResponse> GetAuthorizedServicesUsingGETAsync (string secureId);

        /// <summary>
        /// getAuthorizedServices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (AuthorizedServicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizedServicesResponse>> GetAuthorizedServicesUsingGETAsyncWithHttpInfo (string secureId);
        /// <summary>
        /// getChargingLogBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ChargingLog&gt;</returns>
        System.Threading.Tasks.Task<List<ChargingLog>> GetChargingLogBySubscriptionUsingGETAsync (long? id);

        /// <summary>
        /// getChargingLogBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChargingLog>>> GetChargingLogBySubscriptionUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getCustomerTotalAmount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> GetCustomerTotalAmountUsingGETAsync (string id);

        /// <summary>
        /// getCustomerTotalAmount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> GetCustomerTotalAmountUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// getInvoiceDetails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetInvoiceDetailsUsingGETAsync (InvoiceRequest invoiceRequest);

        /// <summary>
        /// getInvoiceDetails
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceDetailsUsingGETAsyncWithHttpInfo (InvoiceRequest invoiceRequest);
        /// <summary>
        /// getMessageTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>Task of MessageTemplate</returns>
        System.Threading.Tasks.Task<MessageTemplate> GetMessageTemplateUsingGETAsync (string lifecycleEventName);

        /// <summary>
        /// getMessageTemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetMessageTemplateUsingGETAsyncWithHttpInfo (string lifecycleEventName);
        /// <summary>
        /// getServiceInstancesBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ServiceInstanceResult&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceInstanceResult>> GetServiceInstancesBySubscriptionUsingGETAsync (long? id);

        /// <summary>
        /// getServiceInstancesBySubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceInstanceResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceInstanceResult>>> GetServiceInstancesBySubscriptionUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ServiceOfferingResult&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceOfferingResult>> GetServiceOfferingsBySubscriptionPlanUsingGETAsync (long? id);

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceOfferingResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceOfferingResult>>> GetServiceOfferingsBySubscriptionPlanUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// getTotalRevenuePerMonth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetTotalRevenuePerMonthUsingGETAsync (long? id);

        /// <summary>
        /// getTotalRevenuePerMonth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetTotalRevenuePerMonthUsingGETAsyncWithHttpInfo (long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EndpointsApi : IEndpointsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EndpointsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EndpointsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// authorize 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>bool?</returns>
        public bool? AuthorizeUsingPUT (Authorization authorization)
        {
             ApiResponse<bool?> localVarResponse = AuthorizeUsingPUTWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// authorize 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > AuthorizeUsingPUTWithHttpInfo (Authorization authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EndpointsApi->AuthorizeUsingPUT");

            var localVarPath = "/api/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null && authorization.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authorization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authorization; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthorizeUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// authorize 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> AuthorizeUsingPUTAsync (Authorization authorization)
        {
             ApiResponse<bool?> localVarResponse = await AuthorizeUsingPUTAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// authorize 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">authorization</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> AuthorizeUsingPUTAsyncWithHttpInfo (Authorization authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling EndpointsApi->AuthorizeUsingPUT");

            var localVarPath = "/api/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null && authorization.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authorization); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authorization; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthorizeUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// deduct 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>DeductionResult</returns>
        public DeductionResult DeductUsingPUT (Deduction deduction)
        {
             ApiResponse<DeductionResult> localVarResponse = DeductUsingPUTWithHttpInfo(deduction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deduct 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>ApiResponse of DeductionResult</returns>
        public ApiResponse< DeductionResult > DeductUsingPUTWithHttpInfo (Deduction deduction)
        {
            // verify the required parameter 'deduction' is set
            if (deduction == null)
                throw new ApiException(400, "Missing required parameter 'deduction' when calling EndpointsApi->DeductUsingPUT");

            var localVarPath = "/api/deduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deduction != null && deduction.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deduction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deduction; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeductUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeductionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeductionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeductionResult)));
        }

        /// <summary>
        /// deduct 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>Task of DeductionResult</returns>
        public async System.Threading.Tasks.Task<DeductionResult> DeductUsingPUTAsync (Deduction deduction)
        {
             ApiResponse<DeductionResult> localVarResponse = await DeductUsingPUTAsyncWithHttpInfo(deduction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deduct 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deduction">deduction</param>
        /// <returns>Task of ApiResponse (DeductionResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeductionResult>> DeductUsingPUTAsyncWithHttpInfo (Deduction deduction)
        {
            // verify the required parameter 'deduction' is set
            if (deduction == null)
                throw new ApiException(400, "Missing required parameter 'deduction' when calling EndpointsApi->DeductUsingPUT");

            var localVarPath = "/api/deduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deduction != null && deduction.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deduction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deduction; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeductUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeductionResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeductionResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeductionResult)));
        }

        /// <summary>
        /// getAuthorizedServices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>AuthorizedServicesResponse</returns>
        public AuthorizedServicesResponse GetAuthorizedServicesUsingGET (string secureId)
        {
             ApiResponse<AuthorizedServicesResponse> localVarResponse = GetAuthorizedServicesUsingGETWithHttpInfo(secureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAuthorizedServices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of AuthorizedServicesResponse</returns>
        public ApiResponse< AuthorizedServicesResponse > GetAuthorizedServicesUsingGETWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling EndpointsApi->GetAuthorizedServicesUsingGET");

            var localVarPath = "/api/service/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizedServicesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedServicesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedServicesResponse)));
        }

        /// <summary>
        /// getAuthorizedServices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of AuthorizedServicesResponse</returns>
        public async System.Threading.Tasks.Task<AuthorizedServicesResponse> GetAuthorizedServicesUsingGETAsync (string secureId)
        {
             ApiResponse<AuthorizedServicesResponse> localVarResponse = await GetAuthorizedServicesUsingGETAsyncWithHttpInfo(secureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAuthorizedServices 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (AuthorizedServicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizedServicesResponse>> GetAuthorizedServicesUsingGETAsyncWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling EndpointsApi->GetAuthorizedServicesUsingGET");

            var localVarPath = "/api/service/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthorizedServicesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizedServicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizedServicesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizedServicesResponse)));
        }

        /// <summary>
        /// getChargingLogBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ChargingLog&gt;</returns>
        public List<ChargingLog> GetChargingLogBySubscriptionUsingGET (long? id)
        {
             ApiResponse<List<ChargingLog>> localVarResponse = GetChargingLogBySubscriptionUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getChargingLogBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ChargingLog&gt;</returns>
        public ApiResponse< List<ChargingLog> > GetChargingLogBySubscriptionUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetChargingLogBySubscriptionUsingGET");

            var localVarPath = "/api/charging-logs/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChargingLogBySubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChargingLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChargingLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChargingLog>)));
        }

        /// <summary>
        /// getChargingLogBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ChargingLog&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChargingLog>> GetChargingLogBySubscriptionUsingGETAsync (long? id)
        {
             ApiResponse<List<ChargingLog>> localVarResponse = await GetChargingLogBySubscriptionUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getChargingLogBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ChargingLog>>> GetChargingLogBySubscriptionUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetChargingLogBySubscriptionUsingGET");

            var localVarPath = "/api/charging-logs/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChargingLogBySubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ChargingLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ChargingLog>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ChargingLog>)));
        }

        /// <summary>
        /// getCustomerTotalAmount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>long?</returns>
        public long? GetCustomerTotalAmountUsingGET (string id)
        {
             ApiResponse<long?> localVarResponse = GetCustomerTotalAmountUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getCustomerTotalAmount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > GetCustomerTotalAmountUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetCustomerTotalAmountUsingGET");

            var localVarPath = "/api/customer-totalAmountCharge/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerTotalAmountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// getCustomerTotalAmount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> GetCustomerTotalAmountUsingGETAsync (string id)
        {
             ApiResponse<long?> localVarResponse = await GetCustomerTotalAmountUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getCustomerTotalAmount 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> GetCustomerTotalAmountUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetCustomerTotalAmountUsingGET");

            var localVarPath = "/api/customer-totalAmountCharge/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerTotalAmountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// getInvoiceDetails 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Object</returns>
        public Object GetInvoiceDetailsUsingGET (InvoiceRequest invoiceRequest)
        {
             ApiResponse<Object> localVarResponse = GetInvoiceDetailsUsingGETWithHttpInfo(invoiceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getInvoiceDetails 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetInvoiceDetailsUsingGETWithHttpInfo (InvoiceRequest invoiceRequest)
        {
            // verify the required parameter 'invoiceRequest' is set
            if (invoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceRequest' when calling EndpointsApi->GetInvoiceDetailsUsingGET");

            var localVarPath = "/api/getInvoiceDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceRequest != null && invoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(invoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceRequest; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceDetailsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// getInvoiceDetails 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetInvoiceDetailsUsingGETAsync (InvoiceRequest invoiceRequest)
        {
             ApiResponse<Object> localVarResponse = await GetInvoiceDetailsUsingGETAsyncWithHttpInfo(invoiceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getInvoiceDetails 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceRequest">invoiceRequest</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetInvoiceDetailsUsingGETAsyncWithHttpInfo (InvoiceRequest invoiceRequest)
        {
            // verify the required parameter 'invoiceRequest' is set
            if (invoiceRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceRequest' when calling EndpointsApi->GetInvoiceDetailsUsingGET");

            var localVarPath = "/api/getInvoiceDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceRequest != null && invoiceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(invoiceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceRequest; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoiceDetailsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// getMessageTemplate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>MessageTemplate</returns>
        public MessageTemplate GetMessageTemplateUsingGET (string lifecycleEventName)
        {
             ApiResponse<MessageTemplate> localVarResponse = GetMessageTemplateUsingGETWithHttpInfo(lifecycleEventName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getMessageTemplate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        public ApiResponse< MessageTemplate > GetMessageTemplateUsingGETWithHttpInfo (string lifecycleEventName)
        {
            // verify the required parameter 'lifecycleEventName' is set
            if (lifecycleEventName == null)
                throw new ApiException(400, "Missing required parameter 'lifecycleEventName' when calling EndpointsApi->GetMessageTemplateUsingGET");

            var localVarPath = "/api/message-templates/email/{lifecycleEventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lifecycleEventName != null) localVarPathParams.Add("lifecycleEventName", Configuration.ApiClient.ParameterToString(lifecycleEventName)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// getMessageTemplate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>Task of MessageTemplate</returns>
        public async System.Threading.Tasks.Task<MessageTemplate> GetMessageTemplateUsingGETAsync (string lifecycleEventName)
        {
             ApiResponse<MessageTemplate> localVarResponse = await GetMessageTemplateUsingGETAsyncWithHttpInfo(lifecycleEventName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getMessageTemplate 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lifecycleEventName">lifecycleEventName</param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetMessageTemplateUsingGETAsyncWithHttpInfo (string lifecycleEventName)
        {
            // verify the required parameter 'lifecycleEventName' is set
            if (lifecycleEventName == null)
                throw new ApiException(400, "Missing required parameter 'lifecycleEventName' when calling EndpointsApi->GetMessageTemplateUsingGET");

            var localVarPath = "/api/message-templates/email/{lifecycleEventName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lifecycleEventName != null) localVarPathParams.Add("lifecycleEventName", Configuration.ApiClient.ParameterToString(lifecycleEventName)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// getServiceInstancesBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ServiceInstanceResult&gt;</returns>
        public List<ServiceInstanceResult> GetServiceInstancesBySubscriptionUsingGET (long? id)
        {
             ApiResponse<List<ServiceInstanceResult>> localVarResponse = GetServiceInstancesBySubscriptionUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getServiceInstancesBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ServiceInstanceResult&gt;</returns>
        public ApiResponse< List<ServiceInstanceResult> > GetServiceInstancesBySubscriptionUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetServiceInstancesBySubscriptionUsingGET");

            var localVarPath = "/api/service-instances/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceInstancesBySubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceInstanceResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceInstanceResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceInstanceResult>)));
        }

        /// <summary>
        /// getServiceInstancesBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ServiceInstanceResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceInstanceResult>> GetServiceInstancesBySubscriptionUsingGETAsync (long? id)
        {
             ApiResponse<List<ServiceInstanceResult>> localVarResponse = await GetServiceInstancesBySubscriptionUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getServiceInstancesBySubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceInstanceResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ServiceInstanceResult>>> GetServiceInstancesBySubscriptionUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetServiceInstancesBySubscriptionUsingGET");

            var localVarPath = "/api/service-instances/subscription/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceInstancesBySubscriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceInstanceResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceInstanceResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceInstanceResult>)));
        }

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;ServiceOfferingResult&gt;</returns>
        public List<ServiceOfferingResult> GetServiceOfferingsBySubscriptionPlanUsingGET (long? id)
        {
             ApiResponse<List<ServiceOfferingResult>> localVarResponse = GetServiceOfferingsBySubscriptionPlanUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;ServiceOfferingResult&gt;</returns>
        public ApiResponse< List<ServiceOfferingResult> > GetServiceOfferingsBySubscriptionPlanUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetServiceOfferingsBySubscriptionPlanUsingGET");

            var localVarPath = "/api/service-offerings/offer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceOfferingsBySubscriptionPlanUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceOfferingResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceOfferingResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceOfferingResult>)));
        }

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;ServiceOfferingResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceOfferingResult>> GetServiceOfferingsBySubscriptionPlanUsingGETAsync (long? id)
        {
             ApiResponse<List<ServiceOfferingResult>> localVarResponse = await GetServiceOfferingsBySubscriptionPlanUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getServiceOfferingsBySubscriptionPlan 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceOfferingResult&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ServiceOfferingResult>>> GetServiceOfferingsBySubscriptionPlanUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetServiceOfferingsBySubscriptionPlanUsingGET");

            var localVarPath = "/api/service-offerings/offer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceOfferingsBySubscriptionPlanUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ServiceOfferingResult>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ServiceOfferingResult>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ServiceOfferingResult>)));
        }

        /// <summary>
        /// getTotalRevenuePerMonth 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetTotalRevenuePerMonthUsingGET (long? id)
        {
             ApiResponse<List<Object>> localVarResponse = GetTotalRevenuePerMonthUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getTotalRevenuePerMonth 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetTotalRevenuePerMonthUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetTotalRevenuePerMonthUsingGET");

            var localVarPath = "/api/charging-logs-totalamount-customer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTotalRevenuePerMonthUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// getTotalRevenuePerMonth 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetTotalRevenuePerMonthUsingGETAsync (long? id)
        {
             ApiResponse<List<Object>> localVarResponse = await GetTotalRevenuePerMonthUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getTotalRevenuePerMonth 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetTotalRevenuePerMonthUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetTotalRevenuePerMonthUsingGET");

            var localVarPath = "/api/charging-logs-totalamount-customer/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTotalRevenuePerMonthUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

    }
}
