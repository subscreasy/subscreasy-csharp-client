/* 
 * Api Documentation
 *
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.kodfarki.subscreasy.client.model;

namespace IO.Swagger.com.kodfarki.subscreasy.client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubsriptionResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Subsription</returns>
        Subsription CancelSubscriptionUsingPUT (Cancellation cancellation);

        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>ApiResponse of Subsription</returns>
        ApiResponse<Subsription> CancelSubscriptionUsingPUTWithHttpInfo (Cancellation cancellation);
        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetActiveSubscriptionsUsingGET (string secureId);

        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetActiveSubscriptionsUsingGETWithHttpInfo (string secureId);
        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        List<Subsription> GetAllCompanySubscriptionsUsingGET (string id);

        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        ApiResponse<List<Subsription>> GetAllCompanySubscriptionsUsingGETWithHttpInfo (string id);
        /// <summary>
        /// getSubsription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Subsription</returns>
        Subsription GetSubsriptionUsingGET (long? id);

        /// <summary>
        /// getSubsription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Subsription</returns>
        ApiResponse<Subsription> GetSubsriptionUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>SubscriptionCreateResult</returns>
        SubscriptionCreateResult StartSubscriptionUsingPOST (StartSubscriptionRequest request);

        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of SubscriptionCreateResult</returns>
        ApiResponse<SubscriptionCreateResult> StartSubscriptionUsingPOSTWithHttpInfo (StartSubscriptionRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of Subsription</returns>
        System.Threading.Tasks.Task<Subsription> CancelSubscriptionUsingPUTAsync (Cancellation cancellation);

        /// <summary>
        /// cancelSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subsription>> CancelSubscriptionUsingPUTAsyncWithHttpInfo (Cancellation cancellation);
        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsUsingGETAsync (string secureId);

        /// <summary>
        /// getActiveSubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsUsingGETAsyncWithHttpInfo (string secureId);
        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        System.Threading.Tasks.Task<List<Subsription>> GetAllCompanySubscriptionsUsingGETAsync (string id);

        /// <summary>
        /// getAllCompanySubscriptions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// getSubsription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of Subsription</returns>
        System.Threading.Tasks.Task<Subsription> GetSubsriptionUsingGETAsync (long? id);

        /// <summary>
        /// getSubsription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subsription>> GetSubsriptionUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of SubscriptionCreateResult</returns>
        System.Threading.Tasks.Task<SubscriptionCreateResult> StartSubscriptionUsingPOSTAsync (StartSubscriptionRequest request);

        /// <summary>
        /// startSubscription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (SubscriptionCreateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCreateResult>> StartSubscriptionUsingPOSTAsyncWithHttpInfo (StartSubscriptionRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubsriptionResourceApi : ISubsriptionResourceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubsriptionResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubsriptionResourceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubsriptionResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubsriptionResourceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Subsription</returns>
        public Subsription CancelSubscriptionUsingPUT (Cancellation cancellation)
        {
             ApiResponse<Subsription> localVarResponse = CancelSubscriptionUsingPUTWithHttpInfo(cancellation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>ApiResponse of Subsription</returns>
        public ApiResponse< Subsription > CancelSubscriptionUsingPUTWithHttpInfo (Cancellation cancellation)
        {
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling SubsriptionResourceApi->CancelSubscriptionUsingPUT");

            var localVarPath = "/api/subscriptions/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscriptionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of Subsription</returns>
        public async System.Threading.Tasks.Task<Subsription> CancelSubscriptionUsingPUTAsync (Cancellation cancellation)
        {
             ApiResponse<Subsription> localVarResponse = await CancelSubscriptionUsingPUTAsyncWithHttpInfo(cancellation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// cancelSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellation">cancellation</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subsription>> CancelSubscriptionUsingPUTAsyncWithHttpInfo (Cancellation cancellation)
        {
            // verify the required parameter 'cancellation' is set
            if (cancellation == null)
                throw new ApiException(400, "Missing required parameter 'cancellation' when calling SubsriptionResourceApi->CancelSubscriptionUsingPUT");

            var localVarPath = "/api/subscriptions/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cancellation != null && cancellation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cancellation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cancellation; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSubscriptionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetActiveSubscriptionsUsingGET (string secureId)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetActiveSubscriptionsUsingGETWithHttpInfo(secureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetActiveSubscriptionsUsingGETWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling SubsriptionResourceApi->GetActiveSubscriptionsUsingGET");

            var localVarPath = "/api/subsriptions/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetActiveSubscriptionsUsingGETAsync (string secureId)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetActiveSubscriptionsUsingGETAsyncWithHttpInfo(secureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getActiveSubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="secureId">secureId</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetActiveSubscriptionsUsingGETAsyncWithHttpInfo (string secureId)
        {
            // verify the required parameter 'secureId' is set
            if (secureId == null)
                throw new ApiException(400, "Missing required parameter 'secureId' when calling SubsriptionResourceApi->GetActiveSubscriptionsUsingGET");

            var localVarPath = "/api/subsriptions/subscriber/{secureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (secureId != null) localVarPathParams.Add("secureId", Configuration.ApiClient.ParameterToString(secureId)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetActiveSubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>List&lt;Subsription&gt;</returns>
        public List<Subsription> GetAllCompanySubscriptionsUsingGET (string id)
        {
             ApiResponse<List<Subsription>> localVarResponse = GetAllCompanySubscriptionsUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of List&lt;Subsription&gt;</returns>
        public ApiResponse< List<Subsription> > GetAllCompanySubscriptionsUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubsriptionResourceApi->GetAllCompanySubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/company/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCompanySubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of List&lt;Subsription&gt;</returns>
        public async System.Threading.Tasks.Task<List<Subsription>> GetAllCompanySubscriptionsUsingGETAsync (string id)
        {
             ApiResponse<List<Subsription>> localVarResponse = await GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllCompanySubscriptions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (List&lt;Subsription&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Subsription>>> GetAllCompanySubscriptionsUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubsriptionResourceApi->GetAllCompanySubscriptionsUsingGET");

            var localVarPath = "/api/subscriptions/company/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCompanySubscriptionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Subsription>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Subsription>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Subsription>)));
        }

        /// <summary>
        /// getSubsription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Subsription</returns>
        public Subsription GetSubsriptionUsingGET (long? id)
        {
             ApiResponse<Subsription> localVarResponse = GetSubsriptionUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSubsription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Subsription</returns>
        public ApiResponse< Subsription > GetSubsriptionUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubsriptionResourceApi->GetSubsriptionUsingGET");

            var localVarPath = "/api/subsriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubsriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// getSubsription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of Subsription</returns>
        public async System.Threading.Tasks.Task<Subsription> GetSubsriptionUsingGETAsync (long? id)
        {
             ApiResponse<Subsription> localVarResponse = await GetSubsriptionUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSubsription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Subsription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subsription>> GetSubsriptionUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubsriptionResourceApi->GetSubsriptionUsingGET");

            var localVarPath = "/api/subsriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubsriptionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subsription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subsription) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subsription)));
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>SubscriptionCreateResult</returns>
        public SubscriptionCreateResult StartSubscriptionUsingPOST (StartSubscriptionRequest request)
        {
             ApiResponse<SubscriptionCreateResult> localVarResponse = StartSubscriptionUsingPOSTWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of SubscriptionCreateResult</returns>
        public ApiResponse< SubscriptionCreateResult > StartSubscriptionUsingPOSTWithHttpInfo (StartSubscriptionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SubsriptionResourceApi->StartSubscriptionUsingPOST");

            var localVarPath = "/api/subscriptions/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionCreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionCreateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionCreateResult)));
        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of SubscriptionCreateResult</returns>
        public async System.Threading.Tasks.Task<SubscriptionCreateResult> StartSubscriptionUsingPOSTAsync (StartSubscriptionRequest request)
        {
             ApiResponse<SubscriptionCreateResult> localVarResponse = await StartSubscriptionUsingPOSTAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// startSubscription 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (SubscriptionCreateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubscriptionCreateResult>> StartSubscriptionUsingPOSTAsyncWithHttpInfo (StartSubscriptionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SubsriptionResourceApi->StartSubscriptionUsingPOST");

            var localVarPath = "/api/subscriptions/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSubscriptionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubscriptionCreateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SubscriptionCreateResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubscriptionCreateResult)));
        }

    }
}
